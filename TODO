* Complete Stochastics support
  * Test

* Make the regular expressions for integer-valued dimensions not consider or modify strings which are
  in comments or in quotes (e.g. printf strings)

* Write a front-end to auto-configure preference file.
  For reading the preferences file, look into using the Python module
  ConfigParser. It seems to be part of the standard distribution.
  For a more complete list of options for this, see http://wiki.python.org/moin/ConfigParserShootout
    Other ideas for later persual:
      SCons (http://www.scons.org) / Cons / pkg-config

* Add ASCII/binary vector initialisation options

* Add the ability to distribute stochastic simulations using MPI with the scheduling method

* Deterministic/distributed MPI
  * Needs testing.
  * Implement sub-sampling k-space and check sub-sampling for x-space
  * Implement sub-sampling the second MPI dimension

* Make sure that all the things that Andy has been doing to enable various simulation
  parameters can be controlled at simulation run time can be done in xpdeint.
    - Implemented: <integrate "interval">, <noise "mean-rate"> (for Poissonian), <noise "seed">
                   and <dimension "domain"> for transverse dimensions. Same as xmds-1?
                   Pre-processing of arguments works and the example diffusion_arguments.xmds 
                   shows how this can work.
    - High priority: <dimension "domain"> for integer dimensions. May not be simple as lattice
                     and domain are linked. Why do integer dimensions accept both lattice and domain??
                     GD: For integer dimensions, lattice is optional and is used as a check for the values
                         provided in 'domain'.
    - Challenging: <dimension "lattice"> in geometries, and samples (and for integer dimensions)
                   <integrate "steps"> and <samples>
    - Weird/low-priority: Number of cycles
                          Tolerance and cut-off for adaptive algorithms
    - Any requests?

* Rewrite parser so that it isn't so long. (Ask Gabriel McManus)

* Documentation needs to be written (both user and developer). The developer documentation
  needs to be converted from current straight comments to use docstrings.

* Licenses: The GPLv2 header needs to be put on all of the source files for this project.
  I've been very lazy and have just used the default of the text editor I have been using
  which is simply "copyright (c) Graham Dennis" or the like. My intention is that the whole
  project should be under GPL2 unless there is some compelling reason why it should be under
  something else.

* Example library

* Runtime-limiting support (as in xmds-1)

* In adaptive integrators, the ability to set an absolute cutoff (per vector component) in addition to a relative cutoff
  for step-error calculations.

* Check that all bug fixes to xmds-1 since September 1, 2007 have been added to xpdeint. In particular, I don't think the changes to the adaptive
  step error-calculation routine have been made.
  
* Test the various integrators.

* Shift the output code into its own directory and make the ASCII and Binary output type classes not inherit from _Feature. These need to be separate
  things that either are delegated to or are inherited from themselves. The better option is probably delegation in a similar manner to how Vectors
  delegate initialisation to a VectorInitialisation instance.
  The point of this is to make the output format of a breakpoint independent of the output format for the whole simulation.

* Fix XSIL import to not depend on libxmds, or do something equivalent.

* Add a 'moment group 0' which contains simulation constants. This moment group would be zero-d and would contain various constants depending on the
  exact simulation. Constants that should be included are: the final value of the propagation dimension, any passed-in arguments, the number of paths
  (if appropriate), and anything else appropriate.

* Add support for moment post-processing. This is only necessary for multi-path simulations where a temporal fourier transform needs to be averaged.
  Currently you can probably get around this limitation by using cross-propagation for the integration. I *think* you can have noises in cross-propagation
  integrators.

* Rewrite bindNamedVectors/preflight/parent system. It's all a mess. The parent object should be set explicitly during initialisation, not found implicitly
  and bindNamedVectors/preflight should probably change to something like 'localPreflight'/'nonLocalPreflight'.

* Add support for multiple transforms. Here we will want a transform multiplexer to combine the results of the (separable) transforms. The kinds of transforms
  that should be considered should include:
  - Discrete Cosine / Sine Transforms (for even/odd symmetric boundary conditions)
  - General matrix transforms. For example, Hankel transforms (require non-uniform dimensions) 
    and hermite-gaussian basis decomposition (may require non-square transforms).

* Make xmds/xpdeint code compile on Windows. Currently it works in Cygwin but suffers from 
  SERIOUS performance degradation. I've been trying to compile a simple script (modified 
  kubo.xmds) using the MS Visual Studio 2005 Express compiler. The following are compile issues:
  - Headers <unistd.h> <sys/time.h> and <stdint.h> don't exist on Windows.
  - M_PI/etc aren't defined by default in math.h. There is a define you can use to get them,
    however.
  - _LOG lines reutrn syntax errors. Do these use some modern C/C++, written poorly, is the VS 
    compiler screwed, or is some Windows compatibility thing? Either way, removing the brackets
    before and after the braces fixes the problem.
  - erand48 is not defined on Windows. We'll need a replacement (or write a substitution function).
  - fseeko is a POSIX thing as well and is missing on Windows. If we need 64 bit offsets we 
    could substitute with fsetpos and _filelengthi64. If not, why don't we use fseek?
  - fftw3 has compiled windows DLL's which they claim are well optimised. We'll have to learn to 
    dynamically link with fftw3 (which apparently has wisdom issues).
  Implementation notes:
  - I don't think a Windows distribution needs MPI/OpenMP support. Otherwise, I don't see why the
    things xmds does isn't easily portable...
  - Works fine with NO features, defining M_PI, removing brackets around _LOG definition, removing
    the POSIX headers, no fftw, and ASCII output. 
  - Next priorities: getting fftw3 and random numbers working, and:
  - I would suggest adding a <target> windows/posix </target> feature. Later we could configure a
    default target when xpdeint is installed. Alternatively we could use a <windows/> feature?
