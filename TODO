* Complete Stochastics support
  * Test
  * Implement noise vectors
  * Fix given recent discovery of limitations

* Write a front-end to auto-configure preference file.
  For reading the preferences file, look into using the Python module
  ConfigParser. It seems to be part of the standard distribution.
  For a more complete list of options for this, see http://wiki.python.org/moin/ConfigParserShootout
    Other ideas for later persual:
      SCons (http://www.scons.org) / Cons / pkg-config

* Add ASCII/binary vector initialisation options

* Add the ability to distribute stochastic simulations using MPI with the scheduling method

* Deterministic/distributed MPI
  * Needs testing.

* Make sure that all the things that Andy has been doing to enable various simulation
  parameters can be controlled at simulation run time can be done in xpdeint.
    - Implemented: <integrate "interval">, <noise "mean-rate"> (for Poissonian), <noise "seed">
                   and <dimension "domain"> for transverse dimensions. Same as xmds-1?
                   Pre-processing of arguments works and the example diffusion_arguments.xmds 
                   shows how this can work.
    - High priority: <dimension "domain"> for integer dimensions. May not be simple as lattice
                     and domain are linked. Why do integer dimensions accept both lattice and domain??
                     GD: For integer dimensions, lattice is optional and is used as a check for the values
                         provided in 'domain'.
    - Challenging: <dimension "lattice"> in geometries, and samples (and for integer dimensions)
                   <integrate "steps"> and <samples>
    - Weird/low-priority: Number of cycles
                          Tolerance and cut-off for adaptive algorithms
    - Any requests?

* Rewrite parser so that it isn't so long. (Ask Gabriel McManus)

* Documentation needs to be written (both user and developer). The developer documentation
  needs to be converted from current straight comments to use docstrings.

* Licenses: The BSD License header needs to be put on all of the source files for this project.
  I've been very lazy and have just used the default of the text editor I have been using
  which is simply "copyright (c) Graham Dennis" or the like. My intention is that the whole
  project should be under BSD (or modified BSD) unless there is some compelling reason why it
  should be under something else.

* Example library

* Runtime-limiting support (as in xmds-1)

* In adaptive integrators, the ability to set an absolute cutoff (per vector component) in addition to a relative cutoff
  for step-error calculations.

* Check that all bug fixes to xmds-1 since September 1, 2007 have been added to xpdeint. In particular, I don't think the changes to the adaptive
  step error-calculation routine have been made.
  
* Fix XSIL import to not depend on libxmds, or do something equivalent.
  - The something equivalent that we will do is support loading of HDF5 files.
    I do not plan on replacing libxmds. If someone wants to load binary XSIL data,
    they can have xmds-1 installed or HDF5 installed.

* Add a 'moment group 0' which contains simulation constants. This moment group would be zero-d and would contain various constants depending on the
  exact simulation. Constants that should be included are: the final value of the propagation dimension, any passed-in arguments, the number of paths
  (if appropriate), and anything else appropriate.
  - This can be added in the HDF5 output file.

* Add support for moment post-processing. This is only necessary for multi-path simulations where a temporal fourier transform needs to be averaged.
  Currently you can probably get around this limitation by using cross-propagation for the integration. I *think* you can have noises in cross-propagation
  integrators.

* Rewrite bindNamedVectors/preflight system. It's a mess. bindNamedVectors/preflight should probably be renamed to something like 'localPreflight'/'nonlocalPreflight'.

* Add support for multiple transforms. Here we will want a transform multiplexer to combine the results of the (separable) transforms. The kinds of transforms
  that should be considered should include:
  - Discrete Cosine / Sine Transforms (for even/odd symmetric boundary conditions): Done
  - General matrix transforms. For example, Hankel transforms (require non-uniform dimensions) 
    and hermite-gaussian basis decomposition (may require non-square transforms): Done
  - We need a differentiation operator D[phi, x, x, y, y] = d^4phi/(dx^2 dy^2) (better syntax needed) to represent derivatives of variables.
    Another option for the syntax could be D_x[phi], D_x2[phi], D_theta[phi], D_x_y[phi]. This way only symbols starting with 'D_' would be banned
    instead of all beginning with 'D' which would be a little restrictive. Also, we won't introduce a new kind of operator notation that could be confused
    with IP or EX operators. And this way we can then use the same parsing code as is used for EX/IP operators and all this code can be combined into a single
    location.
    This is needed because for many transforms, a derivative cannot be represented in terms of IP or EX operators.
    A good example is calculating odd derivatives with the DCT/DST transforms. i*kx is *NOT* the first derivative. This is only
    true for DFTs. However, the first derivative can be calculated when using DCTs/DSTs, so the 'D' operator would make this available.
    This would also lessen the learning curve for first-time users, as they can use a more obvious syntax instead of EX or IP operators.
    Even better, this syntax would be independent of the transform you are using. If a specific transform doesn't support the particular
    derivative requested, it can simply say so at compile time.

* Make xmds/xpdeint code compile on Windows. Currently it works in Cygwin but suffers from 
  SERIOUS performance degradation. I've been trying to compile a simple script (modified 
  kubo.xmds) using the MS Visual Studio 2005 Express compiler. The following are compile issues:
  - Headers <unistd.h> <sys/time.h> and <stdint.h> don't exist on Windows. Fixed with #ifdef POSIX.
      unistd.h - not sure when we use it... perhaps for pthreads?
      sys/time.h - we'll need to replace gettimeofday() with getsystemtime() or similar. Affects benchmark,
      stdint.h - seems to be C99 but not in Visual studio 2005... strange... used for what exactly?
  - M_PI/etc aren't defined by default in math.h. Defining _USE_CONSTANTS fixes that.
  - _LOG lines reutrn syntax errors. Fixed with Grahams patch
  - erand48 is not defined on Windows. dsfmt replacements work fine.
  - fseeko is a POSIX thing as well and is missing on Windows. To use 64 bit offsets we 
    could substitute with fsetpos and _filelengthi64. 
  - fftw3 has compiled windows DLL's which they claim are well optimised. Linking with them is
    easy but we can't do wisdom. #ifdef POSIX removes wisdom from windows.
  Implementation notes:
  - I don't think a Windows distribution needs MPI/OpenMP support. Otherwise, I don't see why the
    things xmds does isn't easily portable...
  - Now works fine with limited features, fftw without wisdom, and ASCII output. 
  - kubo is MUCH faster compiled on MSVC++ than cygwin GCC
  - diffusion_win works fine on windows.
  - Next priorities: getting fftw3 working and porting the benchmark code...
  - Investigate MinGW GCC 4.3 performance versus Visual Studio performance.

* Permit general Dirichlet boundary conditions to be specified as a special kind of filter that automatically prevents amplitude from
  straying into these regions. It would also perform optimisations in the looping code to only loop over the parts of the grid that
  aren't zero. I'm thinking specifically here of the Projected-GPE type things and creating a general optimisation for these kinds of
  problems where only a small subset of the fourier space is cared about, but the transform is done on the entire grid. The optimisation
  would probably use something like run-length encoding to determine the parts of the grid that need to be looped over.

* Breakpoint on signal? (e.g. USR1)

* Make CodeLexer's IPOperatorSanityCheck check for multiplying IP operators by things or dividing (in the simplest possible way).
  i.e. check for 0.5 * L[phi] and L[phi]/3.0 etc, but not ((L[phi]) + 6.0) / 3.0;

Things to be done by AIP:
* Windows compatibility
* Remove dependence on libxmds for XSIL import (port xsil2graphics too?)
* 'D_' operators (for ease of use by new users)
Lower priority, but still nice:
* General matrix transforms lending credibility to calling xpdeint a general spectral method code generator.

Testcases needed:
* MPI with Fourier transforms testing looping over both MPI dimensions with a vector that only has one of the two MPI dimensions.
* Various tests using nonlocal dimension access
* Tests of dumping fields with integer-valued dimensions using HDF5
* Tests dumping fields where the testcase data was dumped on a big-endian machine (PPC)
* More testcases doing stupid things with loading and dumping of various formats of data, including loading in MPI
  simulations, writing of ascii/binary/HDF5 data and loading of binary/HDF5 data.

* Consider alternative syntax for nonlocal access: Perhaps phi(j := j+1) instead of phi(j: j+1) or phi(j => j+1)?

* pointsInDimensionsWithIndices should probably be renamed and most things that use it should probably be shifted to use
  localPointsInDimensionsAfterDimensionInSpace

* Replace 'space' with the more general notion of 'basis'. Change the transform system to not require transforms to define
  how to perform every possible transform, but instead just the fundamental operations that can then be chained together as
  necessary. This will enable more general bases like (r, theta) -> (kr, m) so that nonsymmetric polar problems can be treated
  naturally. This will also permit the possibility of more than two representations for a given dimension, for example it 
  could be useful to have a Hermite-Gauss with x, nx and kx representations.
  A 'basis' is an ordered list of dimensionRepresentations with possible local offsets for the dimReps. The dimReps should have
  no notion of local offsets or local lattices. Each 'basis' has a unique identifying number, this becomes the equivalent of the
  'space' number.