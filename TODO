* Complete Stochastics support
  * Test
  * Add the GNU scientific library as another source for noises

* Make the regular expressions for integer-valued dimensions not consider or modify strings which are
  in comments or in quotes (e.g. printf strings)

* Write a front-end to auto-configure preference file.
  For reading the preferences file, look into using the Python module
  ConfigParser. It seems to be part of the standard distribution.
  For a more complete list of options for this, see http://wiki.python.org/moin/ConfigParserShootout
    Other ideas for later persual:
      SCons (http://www.scons.org) / Cons / pkg-config

* Add ASCII/binary vector initialisation options

* Add the ability to distribute stochastic simulations using MPI with the scheduling method

* Deterministic/distributed MPI
  * Needs testing.
  * Implement sub-sampling k-space and check sub-sampling for x-space

* Make sure that all the things that Andy has been doing to enable various simulation
  parameters can be controlled at simulation run time can be done in xpdeint.
    - Implemented: <integrate "interval">, <noise "mean-rate"> (for Poissonian), <noise "seed">
                   and <dimension "domain"> for transverse dimensions. Same as xmds-1?
                   Pre-processing of arguments works and the example diffusion_arguments.xmds 
                   shows how this can work.
    - High priority: <dimension "domain"> for integer dimensions. May not be simple as lattice
                     and domain are linked. Why do integer dimensions accept both lattice and domain??
                     GD: For integer dimensions, lattice is optional and is used as a check for the values
                         provided in 'domain'.
    - Challenging: <dimension "lattice"> in geometries, and samples (and for integer dimensions)
                   <integrate "steps"> and <samples>
    - Weird/low-priority: Number of cycles
                          Tolerance and cut-off for adaptive algorithms
    - Any requests?

* Rewrite parser so that it isn't so long. (Ask Gabriel McManus)

* Documentation needs to be written (both user and developer). The developer documentation
  needs to be converted from current straight comments to use docstrings.

* Licenses: The GPLv2 header needs to be put on all of the source files for this project.
  I've been very lazy and have just used the default of the text editor I have been using
  which is simply "copyright (c) Graham Dennis" or the like. My intention is that the whole
  project should be under GPL2 unless there is some compelling reason why it should be under
  something else.

? FFTW2 support. FFTW3 support has been written and tested, and the basic code for FFTW2 is in
  FourierTransformFFTW2.tmpl, however it hasn't been finished.  In fact, let's not and say we did.

* Example library

* Output:
  ? Post-processing

* Runtime-limiting support (as in xmds-1)

* In adaptive integrators, the ability to set an absolute cutoff (per vector component) in addition to a relative cutoff
  for step-error calculations.

* Check that all bug fixes to xmds-1 since September 1, 2007 have been added to xpdeint. In particular, I don't think the changes to the adaptive
  step error-calculation routine have been made.
  
* Test the various integrators.

* Shift the output code into its own directory and make the ASCII and Binary output type classes not inherit from _Feature. These need to be separate
  things that either are delegated to or are inherited from themselves. The better option is probably delegation in a similar manner to how Vectors
  delegate initialisation to a VectorInitialisation instance.
  The point of this is to make the output format of a breakpoint independent of the output format for the whole simulation.

* Fix XSIL import to not depend on libxmds, or do something equivalent.

* Add a 'moment group 0' which contains simulation constants. This moment group would be zero-d and would contain various constants depending on the
  exact simulation. Constants that should be included are: the final value of the propagation dimension, any passed-in arguments, the number of paths
  (if appropriate), and anything else appropriate.

* Add support for moment post-processing. This is only necessary for multi-path simulations where a temporal fourier transform needs to be averaged.
  Currently you can probably get around this limitation by using cross-propagation for the integration. I *think* you can have noises in cross-propagation
  integrators.
