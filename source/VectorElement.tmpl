@*
VectorElement.tmpl

Created by Graham Dennis on 2007-08-28.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends _VectorElement

@*
  Description of template
*@
@def description: vector $vectorName

@*
  Defines needed at the start of the simulation
*@
@def defines
  @#
// vector $name defines
#define _${field.name}_${name}_ncomponents $nComponents
  @#
@end def

@*
  Globals needed at the start of the simulation
*@
@def globals
  @#
// vector $name globals
$type* _${field.name}_${name} = NULL;
$type* _active_${field.name}_${name} = NULL;
  @if $needsFourierTransforms

unsigned long _${field.name}_${name}_space;
  @end if
  @#
@end def

@*
  Function prototypes
*@
@def functionPrototypes
  @#
  @if not ($needsInitialisation or $needsFourierTransforms)
    @return
  @end if
// vector $name function prototypes
  @if $needsInitialisation
void _${field.name}_${name}_initialise();
  @end if
  @#
  @if $needsFourierTransforms
void _${field.name}_${name}_go_space(unsigned long _newSpace);
  @end if
  @#
@end def

@*
  Function implementations
*@
@def functionImplementations
  @#
  @if not ($needsInitialisation or $needsFourierTransforms)
    @return
  @end if
// vector $name function implementations
  @if $needsInitialisation
    @# Write the vector initialiser
$initialisationFunctionImplementation@slurp
  @end if
  @if $needsFourierTransforms
    @# If we need fourier transforms, then write the FFT go_space routine

${features['FourierTransform'].goSpaceFunctionImplementationForVector(self)}@slurp
  @end if $needsFourierTransforms
@end def

@*
  Write the vector initialisation routine
*@
@def initialisationFunctionImplementation
void _${field.name}_${name}_initialise()
{
  ${initialiser.initialiseVector, autoIndent=True}@slurp
  @if $needsFourierTransforms

  _${field.name}_${name}_space = $initialSpace;
  @end if
}
@end def

@*
  Initialise vector (called from segment 0)
*@
@def initialise
  @#
  @if $needsInitialisation
    @for aliasName in $aliases
_active_${field.name}_${name} = $aliasName;
_${field.name}_${name}_initialise();
    @end for
_active_${field.name}_${name} = _${field.name}_${name};
_${field.name}_${name}_initialise();
  @end if
  @#
@end def

@*
  Allocate (and initialise active pointers) (called from main)
*@
@def allocate

_${field.name}_${name} = ($type*) xmds_malloc(sizeof($type) * _${field.name}_size * _${field.name}_${name}_ncomponents);
_active_${field.name}_${name} = _${field.name}_${name};
  @for aliasName in $aliases
$aliasName = ($type*) xmds_malloc(sizeof($type) * _${field.name}_size * _${field.name}_${name}_ncomponents); // alias for _${id}
  @end for
@end def

@def free

xmds_free(_${field.name}_${name});
_active_${field.name}_${name} = _${field.name}_${name} = NULL;
  @for aliasName in $aliases
xmds_free($aliasName); // alias for _${id}
  @end for
@end def
