@*
Argv.tmpl

Created by Mattias Johnsson on 2008-02-21.
Copyright (c) 2008 Mattias Johnsson. All rights reserved.
*@
@extends _Feature

@def description: argv
@attr featureName = 'Argv'

@def includes
  @#
  @super
  @#
#include <getopt.h>
  @#
@end def

@def globals
  @#
  @super
  @#
// *********** Command line argument global variables *********
  @for $argument in $argList
    @if $argument.type == "string"
$argument.type $argument.name = "$argument.defaultValue";
    @else
$argument.type $argument.name = $argument.defaultValue; 
    @end if
  @end for
  @#
@end def

@def mainBegin($dict)
// *********** Parse the command line for arguments, and set  *********
// *********** the appropriate global variables               *********
int resp;
while (1) {
  static struct option long_options[] = 
    {
      {"help", no_argument, 0, 'h'},
  @for $argument in $argList
      {"$argument.name", required_argument, 0, '$argument.shortName'},
  @end for
    };
  
  int option_index = 0;
  
  resp = getopt_long(argc, argv, "h@slurp
  @for $argument in $argList
$argument.shortName:@slurp
  @end for
", long_options, &option_index);
  
  if (resp == -1) {
    break;
  }
  switch (resp) {
    case 'h':
      printf("Usage: $simulationName @slurp
  @for $argument in $argList
-$argument.shortName < $argument.type > @slurp
  @end for
\n\n");
      printf("Details:\n");
      printf("Option\t\tType\t\tDefault value\n");
  @for $argument in $argList
      printf("-$argument.shortName, --$argument.name\t$argument.type \t\t$argument.defaultValue \n");
  @end for
      exit(0);
  @for $argument in $argList
      
    case '$argument.shortName':
    @if $argument.type == 'string'
      $argument.name = string(optarg);
    @elif $argument.type in ('int', 'long'):
      $argument.name = strtol(optarg, NULL, 10);
    @elif $argument.type in 'double'
      $argument.name = strtod(optarg, NULL);
    @end if
      break;
  @end for
      
    default:
      exit(10);
    }
  }
  
  if (optind < argc) {
    printf("Usage: $simulationName @slurp
      @for $argument in $argList
-$argument.shortName < $argument.type > @slurp
      @end for
\n\n");
    printf("Details:\n");
    printf("Option\t\tType\t\tDefault value\n");
  @for $argument in $argList
    printf("-$argument.shortName, --$argument.name\t$argument.type \t\t$argument.defaultValue \n");
  @end for
    exit(0);
  }
@end def

@def xsilOutputInfo($dict)
  @#
  @set $fp = dict['fp']
  @set $formatSpecifierMap = {'string': ('s', '.c_str()'),
                              'int':    ('i', ''),
                              'long':   ('li', ''),
                              'double': ('e', '')}
  @#
fprintf($fp, "\nVariables that can be specified on the command line:\n");
  @for $argument in $argList

    @set formatSpecifier, argumentSuffix = formatSpecifierMap[$argument.type]
fprintf($fp, "  Command line argument ${argument.name} = %${formatSpecifier}\n", ${argument.name}${argumentSuffix});
  @end for
  @#
@end def
