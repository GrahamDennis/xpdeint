@*
NonConstantOperator.tmpl

Created by Graham Dennis on 2007-10-13.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends Operator

@attr $evaluateOperatorFunctionArgument = 'double _step'

@def evaluateOperatorFunctionImplementation
  @#
  @for $operatorComponentName in $operatorComponents.iterkeys()
    @set $operatorComponentDictionary = $operatorComponents[$operatorComponentName]
    @set $typeNamesSet = set([vector.type for vector in operatorComponentDictionary.iterkeys()])
    @set $typeName = 'double'
    @if 'complex' in typeNamesSet
      @set $typeName = 'complex'
    @end if
${typeName} ${operatorComponentName};
  @end for
  @#
  @set $setOfVectorsToLoopOver = $dependencies.copy()
  @#
  @silent $setOfVectorsToLoopOver.update($operatorTargetVectorsSet)
${transformVectorsToSpace($setOfVectorsToLoopOver, $operatorSpace)}@slurp

${evaluateOperatorLoop($setOfVectorsToLoopOver)}@slurp
  @if $resultVector and $resultVector.needsFourierTransforms

_${resultVector.id}_space = $operatorSpace;
  @end if
  @#
@end def

@def evaluateOperatorLoop($setOfVectorsToLoopOver)
  @#
  @# If we have a result vector, add it
  @if $resultVector
    @silent $setOfVectorsToLoopOver.add($resultVector)
  @end if
${loopOverFieldInSpaceWithVectorsAndInnerContent($field, $operatorSpace, $setOfVectorsToLoopOver, $insideEvaluateOperatorLoops)}@slurp
  @#
@end def