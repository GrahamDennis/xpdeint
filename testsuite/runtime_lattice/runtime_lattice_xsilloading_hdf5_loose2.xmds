<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <testing>
    <arguments>--x_lattice 250 --y_lattice 512</arguments>
    <input_xsil_file name="../io/breakpoints_hdf5_kspace_expected.xsil" />
    <input_xsil_file name="../io/breakpoints_hdf5_mixed_space2_expected.xsil" />
    <xsil_file name="runtime_lattice_xsilloading_hdf5_loose2.xsil" expected="../io/xsilloading_expected2.xsil" absolute_tolerance="1e-7" relative_tolerance="1e-5" />
  </testing>
  
  <name>runtime_lattice_xsilloading_hdf5_loose2</name>
  <author>Graham Dennis</author>
  <description>
    Test loading xsil files in various spaces
  </description>
  
  <features>
    <fftw plan="estimate" />
    <validation kind="run-time"/>

    <arguments>
      <argument name="x_lattice" type="integer" default_value="110"/>
      <argument name="y_lattice" type="integer" default_value="201"/>
    </arguments>
  </features>
  
  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="x" lattice="x_lattice"  domain="(0, 1)" />
      <dimension name="y" lattice="y_lattice"  domain="(-2, 2)" />
    </transverse_dimensions>
  </geometry>
  
  <vector name="oned" dimensions="x" initial_basis="kx" type="complex">
    <components>u</components>
    <initialisation kind="hdf5" geometry_matching_mode="loose">
      <filename>breakpoints_hdf5_kspace_expected.h5</filename>
    </initialisation>
  </vector>
  
  <vector name="twod" dimensions="x y" initial_basis="kx y">
    <components>v</components>
    <initialisation kind="hdf5" geometry_matching_mode="loose">
      <filename>breakpoints_hdf5_mixed_space2_expected.h5</filename>
    </initialisation>
  </vector>
  
  <sequence>
    <filter>
      <![CDATA[
        ;
      ]]>
    </filter>
  </sequence>
  
  <output format="binary">
      <sampling_group basis="x(50) y(0)" initial_sample="yes">
        <moments>amp</moments>
        <dependencies>oned twod</dependencies>
        <![CDATA[
	            amp = cos(u.Re())*sin(u.Im())/2.0 - v.Re()*v.Re()*x*y + sin(y)*v.Im(); // Some crazy function to combine the quantities
        ]]>
      </sampling_group>
  </output>
</simulation>
