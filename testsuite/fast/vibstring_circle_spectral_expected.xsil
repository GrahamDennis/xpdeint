<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <testing>
    <xsil_file name="vibstring_circle_spectral.xsil" expected="vibstring_circle_spectral_expected.xsil" absolute_tolerance="1e-5" relative_tolerance="1e-5" />
  </testing>
  <name>vibstring_circle_spectral</name>
  <author>Graham Dennis</author>
  <description>
    Vibrating string with Dirichlet boundary conditions on a circle.
    
    Modification of vibstring_circle to calculate temporal derivatives in fourier (spectral) space.
    This runs faster than vibstring_circle on the same grid.
  </description>
  
  <features>
    <benchmark />
    <!-- <error_check /> -->
    <bing />
    <fftw plan="patient" />
    <openmp />
    <globals>
      <![CDATA[
      const double T = 10.0;
      const double mass = 1e-3;
      const double length = 1.0;
      const double mu = mass/length;
      const double T_mu = T/mu;
      
      const double xmax = _xy_max_x;
      const double width = 0.1;
      const double absorb = 80.0;
      ]]>
    </globals>
  </features>
  
  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="x" lattice="64"  domain="(-1, 1)" />
      <dimension name="y" lattice="64"  domain="(-1, 1)" />
    </transverse_dimensions>
  </geometry>
  
  <vector name="main" initial_basis="x y" type="complex">
    <components>
      u uDot
    </components>
    <initialisation>
      <![CDATA[
        u = exp(-100.0*((x-0.5)*(x-0.5) + y*y));
        uDot = 0.0;
      ]]>
    </initialisation>
  </vector>
  
  <vector name="boundary" initial_basis="x y" type="double">
    <components>
      bc
    </components>
    <initialisation>
      <![CDATA[
        double r = sqrt(x*x + y*y);
        double rright = xmax-width;
        double rdamping = r > rright ? absorb*(1-cos(M_PI*(r - rright)/width)) : 0.0;

        bc = exp(-rdamping);
        if (r > xmax)
          bc = 0.0;
        if ( r > rright)
          bc = 0.0;
        else
          bc = 1.0;
          
        
      ]]>
    </initialisation>
  </vector>
  
  <sequence>
    <integrate algorithm="ARK89" tolerance="1e-7" interval="4e-2" steps="1000" home_space="k">
      <samples>5 5 100</samples>
      <operators>
        <operator kind="ex" constant="yes" fourier_space="x y">
          <operator_names>L</operator_names>
          <![CDATA[
          double r2 = x*x + y*y;
          if (r2 > (_max_x - width)*(_max_x-width))
            L = 0.0;
          else
            L = 1.0;
          ]]>
        </operator>
        <integration_vectors fourier_space="kx ky">main</integration_vectors>
        <![CDATA[
          du_dt = uDot;
          duDot_dt = L[-T_mu*(kx*kx+ky*ky)*u];
        ]]>
      </operators>
    </integrate>
  </sequence>
  <output format="binary">
      <sampling_group initial_sample="yes">
        <!-- Any dimension not mentioned is assumed to be in real space and its middle element will be sampled -->
        <!-- Note that this is different default behaviour to the filter operator. To integrate, put in a dimension -->
        <!-- with zero lattice points. -->
        <!-- Note that dimensions can be in any order. Not that I can think of a reason why you would want to do that -->
        <dimension name="x" lattice="32" fourier_space="no" />
        <dimension name="y" lattice="32" fourier_space="no" />
        <moments>amp</moments>
        <dependencies>main</dependencies>
        <![CDATA[
          amp = u;
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes">
        <!-- Any dimension not mentioned is assumed to be in real space and its middle element will be sampled -->
        <!-- Note that this is different default behaviour to the filter operator. To integrate, put in a dimension -->
        <!-- with zero lattice points. -->
        <!-- Note that dimensions can be in any order. Not that I can think of a reason why you would want to do that -->
        <dimension name="x" lattice="32" fourier_space="yes" />
        <dimension name="y" lattice="32" fourier_space="yes" />
        <moments>amp</moments>
        <dependencies>main</dependencies>
        <![CDATA[
          amp = u;
        ]]>
      </sampling_group>
      <sampling_group initial_sample="yes">
        <!-- Any dimension not mentioned is assumed to be in real space and its middle element will be sampled -->
        <!-- Note that this is different default behaviour to the filter operator. To integrate, put in a dimension -->
        <!-- with zero lattice points. -->
        <!-- Note that dimensions can be in any order. Not that I can think of a reason why you would want to do that -->
        <dimension name="x" lattice="0" fourier_space="no" />
        <dimension name="y" lattice="0" fourier_space="no" />
        <moments>energy</moments>
        <dependencies>main</dependencies>
        <operator kind="ex" constant="no">
          <operator_names>Lx Ly</operator_names>
          <![CDATA[
            Lx = i*kx;
            Ly = i*ky;
          ]]>
        </operator>
        <![CDATA[
          energy = mod2(uDot) + T_mu*mod2(Lx[u]) + T_mu*mod2(Ly[u]);
        ]]>
      </sampling_group>
  </output>

<info>
Script compiled with xpdeint version VERSION_PLACEHOLDER (SUBVERSION_REVISION_PLACEHOLDER)
See http://www.xmds.org for more information.
</info>

<XSIL Name="moment_group_1">
  <Param Name="n_independent">3</Param>
  <Array Name="variables" Type="Text">
    <Dim>4</Dim>
    <Stream><Metalink Format="Text" Delimiter=" \n"/>
t x y amp 
    </Stream>
  </Array>
  <Array Name="data" Type="double">
    <Dim>6</Dim>
    <Dim>32</Dim>
    <Dim>32</Dim>
    <Dim>4</Dim>
    <Stream><Metalink Format="Binary" UnsignedLong="uint32" precision="double" Type="Remote" Encoding="LittleEndian"/>
vibstring_circle_spectral_expected_mg0.dat
    </Stream>
  </Array>
</XSIL>

<XSIL Name="moment_group_2">
  <Param Name="n_independent">3</Param>
  <Array Name="variables" Type="Text">
    <Dim>4</Dim>
    <Stream><Metalink Format="Text" Delimiter=" \n"/>
t kx ky amp 
    </Stream>
  </Array>
  <Array Name="data" Type="double">
    <Dim>6</Dim>
    <Dim>32</Dim>
    <Dim>32</Dim>
    <Dim>4</Dim>
    <Stream><Metalink Format="Binary" UnsignedLong="uint32" precision="double" Type="Remote" Encoding="LittleEndian"/>
vibstring_circle_spectral_expected_mg1.dat
    </Stream>
  </Array>
</XSIL>

<XSIL Name="moment_group_3">
  <Param Name="n_independent">1</Param>
  <Array Name="variables" Type="Text">
    <Dim>2</Dim>
    <Stream><Metalink Format="Text" Delimiter=" \n"/>
t energy 
    </Stream>
  </Array>
  <Array Name="data" Type="double">
    <Dim>101</Dim>
    <Dim>2</Dim>
    <Stream><Metalink Format="Binary" UnsignedLong="uint32" precision="double" Type="Remote" Encoding="LittleEndian"/>
vibstring_circle_spectral_expected_mg2.dat
    </Stream>
  </Array>
</XSIL>
</simulation>
