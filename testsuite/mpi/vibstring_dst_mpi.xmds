<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <testing>
    <command_line>mpirun -n 4 ./vibstring_dst_mpi</command_line>
    <xsil_file name="vibstring_dst_mpi.xsil" expected="vibstring_dst_mpi_expected.xsil" absolute_tolerance="1e-7" relative_tolerance="1e-5" />
  </testing>
  
  <name>vibstring_dst_mpi</name>
  <author>Graham Dennis</author>
  <description>
    Vibrating string with Dirichlet boundary conditions on a square using DST's.
  </description>
  
  <features>
    <benchmark />
    <bing />
    <fftw plan="patient" />
    <openmp />
    <globals>
      <![CDATA[
      const real T = 10.0;
      const real mass = 1e-3;
      const real length = 1.0;
      const real mu = mass/length;
      
      const real width = 0.1;
      const real absorb = 80.0;
      ]]>
    </globals>
  </features>
  
  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="x" lattice="256"  domain="(-1, 1)" transform="dst"/>
      <dimension name="y" lattice="256"  domain="(-1, 1)" transform="dst"/>
    </transverse_dimensions>
  </geometry>
  
  <driver name="distributed-mpi" />
  
  <vector name="main" initial_space="x y" type="real">
    <components>
      u uDot
    </components>
    <initialisation>
      <![CDATA[
        u = exp(-100.0*((x-0.5)*(x-0.5) + y*y));
        uDot = 0.0;
      ]]>
    </initialisation>
  </vector>
  
  <sequence>
    <integrate algorithm="ARK45" tolerance="1e-5" interval="2e-3" steps="1000">
      <samples>5 5</samples>
      <operators>
        <operator kind="ex" constant="yes">
          <operator_names>L</operator_names>
          <![CDATA[
            L = -T*(kx*kx + ky*ky)/mu;
          ]]>
        </operator>
        <integration_vectors>main</integration_vectors>
        <![CDATA[
          du_dt = uDot;
          duDot_dt = L[u];
        ]]>
      </operators>
    </integrate>
  </sequence>
  <output format="binary">
    <group>
      <sampling initial_sample="yes">
        <!-- Any dimension not mentioned is assumed to be in real space and its middle element will be sampled -->
        <!-- Note that this is different default behaviour to the filter operator. To integrate, put in a dimension -->
        <!-- with zero lattice points. -->
        <!-- Note that dimensions can be in any order. Not that I can think of a reason why you would want to do that -->
        <dimension name="x" fourier_space="no" lattice="32"/>
        <dimension name="y" fourier_space="no" lattice="32"/>
        <moments>amp</moments>
        <dependencies>main</dependencies>
        <![CDATA[
          amp = u;
        ]]>
      </sampling>
    </group>
    <group>
      <sampling initial_sample="yes">
        <dimension name="x" fourier_space="yes" lattice="32" />
        <dimension name="y" fourier_space="yes" lattice="32" />
        <moments>amp</moments>
        <dependencies>main</dependencies>
        <![CDATA[
          amp = mod2(u);
        ]]>
      </sampling>
    </group>
  </output>
</simulation>