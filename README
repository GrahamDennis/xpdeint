Welcome to XMDS2 (codename: xpdeint).
If you have any questions, please email xmds-devel@lists.sourceforge.net

This code is written in python and generates C++ code that is very similar to the
code generated by xmds. It relies on Cheetah Templates (www.cheetahtemplate.org, you
need at least version 2.0.1) to remove the fprintf nightmare in xmds.

First, let's dive into the build instructions before we talk about features.

Build instructions:
0. Obtain XMDS 2. In a directory where you want to check out the repository, run:
   svn checkout https://xmds.svn.sourceforge.net/svnroot/xmds/trunk/xpdeint .
   (Only do this if you haven't done this already).
   
   It is important to NOT download the source from the tarball on the Sourceforge website as
   this tarball does not have executable bits set on any files. Also, installing XMDS2 this
   way will make it much harder to update it in the future.
   
1. As XMDS2 generates C++ code, you will need a C++ compiler. One common free compiler is gcc.
   XMDS2 can also use Intel's C++ compiler if you have it. Intel's compiler typically generates
   faster code than gcc, but it isn't free.
   Mac OS X: Xcode and other development comes free on the Mac OS X install discs. Install the 
   Development package or Xcode (or whatever it is called) in the Optional Installs folder on the
   installation disk.
   Linux: Install 'gcc' or 'g++' using your favourite package manager.

2. Install python 2.4 or greater. (2.5 recommended)
   Mac OS X: The easiest way to do this is by downloading the installer from http://www.python.org.
   If you have Leopard (10.5) or later, then python 2.5+ comes pre-installed.
   
   Linux: Install this using your favourite package manager.
   Windows: One way to install Python and related packages is via the Enthought Python Distribution.
            http://www.enthought.com/products/epd.php
   
3. Install setuptools.
   Linux: Use your favourite package manager (if you can).
   Windows: If you used the Enthought Python Distribution, this is already installed.
   
   Mac OS X: Leopard (10.5) and later have setuptools pre-installed.
             Though if the next step fails, you may need to upgrade setuptools.
             To do that, type "sudo easy_install -U setuptools"
   
   If you have root (sudo) access, the easy way to install this is by executing
   ez_setup.py from the repository. Simply type "sudo python ez_setup.py"
   
   If you want to install into your home directory without root access, this is more complex:
   a) First create the path ~/lib/python2.5/site-packages (assuming you installed python version 2.5) and ~/bin
      Add "export PYTHONPATH=~/lib/python2.5/site-packages:$PYTHONPATH" and "export PATH=~/bin:$PATH" (if necessary)
      to your .bashrc file (and run ". ~/.bashrc")

   b) If necessary install setuptools, by executing ez_setup.py from the repository.
      "python ez_setup.py --prefix=~"

4. Install Cheetah version 2.0.1 or later, pyparsing, and (optionally) lxml. 
   If you have root access, this is as easy as:
   "sudo easy_install Cheetah" or "sudo easy_install pyparsing" or "sudo easy_install lxml"
   Make sure you have 'libxml2' and 'libxslt' installed (and the development packages if
   you're using a package manager) if you want to install lxml.
   
   If you don't have root access or want to install into your home directory, use:
   "easy_install --prefix=~ Cheetah" (etc.)
   
   Note that lxml is not required for XMDS2 to run. If it is installed, it is used to validate
   the xmds script passed to XMDS2 to check that there isn't any invalid syntax or typos that
   XMDS2 wouldn't have otherwise noticed. Also note that installing lxml is a bit tricky on Mac
   OS X Leopard because Apple shipped an old version of libxml2 with the system.
   (This problem does not exist on Snow Leopard.)
   
   Pyparsing and Cheetah are required installs for XMDS2.

5. Cheetah templates (*.tmpl) are compiled into python, to do this, run 'make' in the
   xpdeint/ directory.

6. Install XMDS2 into your python path by running (in the xpdeint/ directory):
   sudo ./setup.py develop
   
   If you want to install it into your home directory, type "./setup.py develop --prefix=~"

7. a) Test XMDS2 by running (in the xpdeint/xpdeint/examples/ directory):
      xpdeint kubo.xmds
7. b) If you have 'numpy' installed, type './run_tests.py' in the xpdeint/ directory
      to run all the tests

8. Run the generated program, which will produce XSIL output similar to that produced by xmds-1
  
   If you wish to load binary XSIL files _into_ XMDS2, then you will need the libxmds library that
   comes with xmds-1. However, the same result can be achieved without using libxmds by using the 'HDF5'
   output format and installing the HDF5 library (see optional installs section).
   
   XMDS2 comes with a new version of xsil2graphics called xsil2graphics2. This version fully supports Mathematica
   and only supports loading HDF5 files into Matlab. The original xsil2graphics can still be used if you need support
   for Gnuplot, R, Scilab, or loading of binary or ascii data files into Matlab.

9. Next time you want to update, just type 'make update' in the xpdeint/ directory.

10. Sign up to the xmds-commit list at https://lists.sourceforge.net/lists/listinfo/xmds-commit.
    This is a reasonably important step as XMDS2 is still very much a moving target and things
    can still change or bugs can be found. Signing up to this list means you can keep track of these
    things. If you're not interested in the up-to-the-moment updates (most people won't be), sign up
    for the 'digest' instead.

11. To build the user documentation, you first need to install sphinx, either via your package manager or:
    sudo easy_install Sphinx

    Then, to build the documentation, in the xpdeint/userdoc/ directory run:
    make html

    If this results in an error, you may need run
    sudo ./setup.py develop

    The generated html documentation can now be found at xpdeint/userdoc/build/html/index.html


Highly suggested (but optional) installs:
* FFTW3. This library is needed for Fourier transforms, which is the transform most people will be using in XMDS2. If you need
  support for MPI distributed simulations, you must install the alpha version.
  
  NOTE: As of current writing, the latest version of fftw3 (3.3alpha1) does not compile on Snow Leopard.
  FFTW-3.2.2 compiles fine on Snow Leopard, but if you need MPI support, you must use the alpha version.
  A patch for this bug exists in admin/fftw3-SnowLeopard.patch
  This patch has been submitted upstream, however no response has been received as yet.
  I hope that the patch makes it into the next release of fftw3.
  To apply the patch run (in the fftw-3 directory):
  patch -p0 < ~/path/to/xpdeint/admin/fftw3-SnowLeopard.patch
  Then configure/compile as normal.
  
* HDF5. This is a library for reading and writing the Heirachical Data Format (http://www.hdfgroup.org/HDF5/).
  After downloading the latest package, install with the --prefix=/usr/local/ option if you want XMDS2 to find the library automatically.
  This is a standardised data format which it is suggested that people use in preference to the older 'binary' output (which is 
  compatible with xmds-1). The advantage of HDF5 is that this data format is understood by a variety of other tools. xsil2graphics2
  provides support for loading data created in this format into Mathematica and Matlab.

Optional installs:
* A Matrix library like ATLAS, or Intel's MKL. (Mac OS X comes with a matrix library)
* GNU Scientific library (GSL).
* numpy (sudo easy_install numpy). (Mac OS X Leopard and above come with numpy)
* h5py. This is needed for checking the results of XMDS2 tests that generate HDF5 output.
  h5py requires numpy >= 1.0.3 Mac OS X Leopard comes with 1.0.1, so this must be upgraded on such systems.
  Upgrading h5py on Mac OS X is best done with the source of the package, as the easy_install option can get confused with multiple numpy versions.
  Mac OS X Snow Leopard comes with 1.2.1
* OpenMPI. Needed to enable XMDS2 to generate scripts that can be run across multiple machines. (Mac OS X Leopard comes with OpenMPI)
* mpmath. Library for arbitrary precision floating point math. Install from package manager or "sudo easy_install mpmath"
  This package is needed for the matrix-based transforms like Bessel and Hermite-Gauss.

So far the feature list includes:
* All of the integrators from xmds-1 (SI, RK4, ARK45, RK9, ARK89).
* Significantly better error reporting. When errors are found when compiling the script they will almost always be reported
  with the corresponding line of your script, instead of the generated source.
* IP/EX operators are separate from the integration algorithm, so you  
  can have both IP and EX operators in a single integrate block. Also,
  EX operators can act on arbitrary code, not just vector components. (e.g. L[phi*phi]).
* The ability to have more than one kind of noise (gaussian, poissonian, etc) in a simulation.
* Cross propagation in the increasing direction of a given dimension
  or in the decreasing dimension. And you can have more than one
  cross-propagator in a given integrator (going in different directions
  or dimensions).
* Fields of different dimensions. So you can have a 1D potential and a 3D wavefunction.
* Integrate more than one vector (in more than one field), so you can  
  now simultaneously integrate a PDE and a coupled ODE (or coupled PDEs of different dimensions).
* MPI support
* Integer-valued dimensions with non-local access. You can have an array of variables and access different
  elements of that array.
* Faster Gaussian noises.
* The ability to calculate spatial correlation functions
* OpenMP support
* From a developer point of view, many things have been abstracted, so  
  adding a new Fourier transform library shouldn't be difficult.
* Non-Fourier transformations have been included.  These include the Bessel basis, 
  Spherical Bessel basis and the Hermitee-Gauss (harmonic oscillator) basis.
* Output moment groups use less memory when there isn't a post_processing element
* Generated source is indented correctly
* An xmds-1 like script file format.
* xmds-1 like generated source.

