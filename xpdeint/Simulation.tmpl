@*
Simulation.tmpl

Created by Graham Dennis on 2007-08-23.

Copyright (c) 2007-2012, Graham Dennis

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of The Australian National University nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*@
@#
@extends xpdeint.ScriptElement
@#
@attr $name = ''
@attr $id = ''
@#
@# First check we have at least Cheetah version 2.0.1
@if __CHEETAH_versionTuple__ < (2, 0, 1, 'final', 0)
  @silent raise AssertionError("xpdeint requires at least Cheetah version "
                               "2.0.1. You currently have %s." % __CHEETAH_version__)
@end if
@#
@#
@# Base simulation template
// ********************************************************
// simulation logging

#define _SAMPLE_LOG_LEVEL      (1 << 0)
#define _SEGMENT_LOG_LEVEL     (1 << 1)
#define _PATH_LOG_LEVEL        (1 << 2)
#define _SIMULATION_LOG_LEVEL  (1 << 3)
#define _WARNING_LOG_LEVEL     (1 << 4)
#define _ERROR_LOG_LEVEL       (1 << 5)
#define _ALL_LOG_LEVELS        _SAMPLE_LOG_LEVEL|_SEGMENT_LOG_LEVEL|_PATH_LOG_LEVEL|_SIMULATION_LOG_LEVEL|_WARNING_LOG_LEVEL|_ERROR_LOG_LEVEL
#define _LOG_LEVELS_BEING_LOGGED (${features['Driver'].logLevelsBeingLogged})

#include <stdio.h>

@set $featureOrdering = ['Driver']
#define _LOG(logLevel, ...) \
  do { \
    if (logLevel & _LOG_LEVELS_BEING_LOGGED) { \
  @set $dict = {'extraIndent': 0}
      ${insertCodeForFeatures('logFunctionBegin', $featureOrdering, $dict), autoIndent=True}@slurp
  @set $extraIndent = dict['extraIndent']
      ${logFunctionInnerContent, autoIndent=True, extraIndent=extraIndent}@slurp
      ${insertCodeForFeaturesInReverseOrder('logFunctionEnd', $featureOrdering, $dict), autoIndent=True}@slurp
      if (logLevel & _ERROR_LOG_LEVEL) \
        exit(1); \
    } \
  } while (0)

// ********************************************************
// simulation includes

#include <xpdeint_platform.h>
#include <cmath>
#include <string>
#include <cstring>
#include <fstream>
#include <sstream>
#include <cstdlib>

#if CFG_OSAPI == CFG_OSAPI_POSIX // These are POSIX headers (i.e. non-windows)
  #include <sys/time.h>
#endif // POSIX

#include <time.h>
#include <list>
#include <vector>

@for $child in $children
  @# Prevent writing zero-length defines
  @set $result = $child.implementationsForFunctionName('includes')
  @if $result and not $result.isspace()
${result}@slurp

  @end if
@end for

#define complex Complex
#define real Re
#define imag Im
#include <complex>
#undef complex
#undef real
#undef imag

@set $realType = {'single': 'float', 'double': 'double'}[$precision]
typedef long integer;
typedef ${realType} real;
typedef std::Complex<real> complex;

const complex i(0.0, 1.0);

#include <xpdeint.h>

using namespace std;

#if CFG_COMPILER == CFG_COMPILER_ICC
  //
  // Disable ICC's warning: label was declared but never referenced
  //
  #pragma warning ( disable : 177 )
#endif

// ********************************************************
// DEFINES
// ********************************************************
@# only loop over the elements that implement the defines function
@for $child in $children
  @# Prevent writing zero-length defines
  @set $result = $child.implementationsForFunctionName('defines')
  @if result and not result.isspace()

// ********************************************************
//   $child.description defines
$result@slurp
  @end if
@end for


// ********************************************************
// GLOBALS
// ********************************************************
@# only loop over the elements that implement the globals function
@for $child in $children
  @# Prevent writing zero-length globals
  @set $result = $child.implementationsForFunctionName('globals')
  @if result and not result.isspace()

// ********************************************************
//   $child.description globals
$result@slurp
  @end if
@end for


// ********************************************************
// FUNCTION PROTOTYPES
// ********************************************************
@# only loop over the elements that implement the prototypes function
@for $child in $children
  @# Prevent writing zero-length globals
  @set $result = $child.implementationsForFunctionName('functionPrototypes')
  @if result and not result.isspace()

// ********************************************************
//   $child.description function prototypes
$result@slurp
  @end if
@end for

// ********************************************************
// MAIN ROUTINE
// ********************************************************
$features.Driver.mainRoutine@slurp

// ********************************************************
// FUNCTION IMPLEMENTATIONS
// ********************************************************
@# only loop over the elements that implement the prototypes function
@for $child in $children
  @# Prevent writing zero-length function implementations
  @set $result = $child.implementationsForFunctionName('functionImplementations')
  @if result and not result.isspace()

// ********************************************************
//   $child.description function implementations
$result@slurp
  @end if
@end for

@def logFunctionInnerContent
  @#
printf(__VA_ARGS__); \
fflush(stdout); \
  @#
@end def
