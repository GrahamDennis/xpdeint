@*
Noise.tmpl

Created by Graham Dennis on 2007-12-14.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.ScriptElement

@from xpdeint.PrintfSafeFilter import PrintfSafeFilter

@def description: Generic noise
@def generatorName: _gen_${prefix}

@def globals
  @#
  @super
  @#
${generatorType} ${generatorName};
  @#
@end def

@*
  Function prototypes
*@
@def functionPrototypes
  @#
  @super
  @#
inline void _make_${prefix}_noises(real _var, real* _noise_vector, unsigned long _n);
  @#
@end def

@*
  Function implementations
*@
@def functionImplementations
  @#
  @super
  @#
inline void _make_${prefix}_noises(real _var, real* _noise_vector, unsigned long _n)
{
  ${makeNoises, autoIndent=True}@slurp
}
  @#
@end def

@def noiseVectorForField(field)
  @#
  @return $noiseVectors[field]
  @#
@end def

@def xsilOutputInfo($dict)
@*doc:
Write to the XSIL file lines naming the seeds that we generated if no seed was provided
in the script file. These are the seeds that should be provided in the script file to get
the same results.
*@
  @#
  @set $fp = dict['fp']
  @#
  @if not self.hasattr('generatedSeeds')
    @return
  @end if
  @#
  @filter $PrintfSafeFilter
fprintf($fp, "\nNo seeds were provided for noise '$prefix'. The seeds generated were:\n");
fprintf($fp, "    @slurp
    @set $separator = ''
    @for seed in $generatedSeeds
${separator}${seed}@slurp
      @set $separator = ', '
    @end for
\n");
  @end filter
@end def