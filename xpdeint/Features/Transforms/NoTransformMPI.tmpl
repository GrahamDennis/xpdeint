@*
NoTransformMPI.tmpl

Created by Graham Dennis on 2008-08-24.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Features.Transforms._NoTransformMPI
@def description: MPI-distributed dimension control

@def setLocalLatticeAndOffsetVariables
  @#
// First work out the local lattice and offset for the geometry
  @set $mpiDimRep = $mpiDimension.inSpace(0)
// Set the block size for most ranks to lattice/processors rounded up
ptrdiff_t _block_size = (${mpiDimRep.globalLattice}-1)/_size + 1;
${mpiDimRep.localOffset} = _rank * _block_size;
if (_rank != _size - 1)
  ${mpiDimRep.localLattice} = _block_size;
else {
  // The last rank takes up everything else
  // this should be less than or equal to _block_size
  ${mpiDimRep.localLattice} = ${mpiDimRep.globalLattice} - _block_size * (_size - 1);
}

  @for $field in $fields
    @if field.name == 'geometry' or not $isFieldDistributed(field)
      @continue
    @end if
    @# Set the local_lattice and local_offset variables based on the
    @# values for the geometry's version of these variables
    @set fieldMPIDimRep = field.dimensionWithName($mpiDimension.name).inSpace(0)
// Set the local_lattice and local_offset variables for the '${field.name}' field.
ptrdiff_t _${field.name}_skip_size = ${mpiDimRep.globalLattice}/${fieldMPIDimRep.globalLattice};
if (_rank == 0) {
  ${fieldMPIDimRep.localOffset} = 0;
  ${fieldMPIDimRep.localLattice} = (${mpiDimRep.localLattice}-1)/_${field.name}_skip_size + 1;
} else {
  ${fieldMPIDimRep.localOffset} = (${mpiDimRep.localOffset}-1)/_${field.name}_skip_size + 1;
  ${fieldMPIDimRep.localLattice} = (${mpiDimRep.localOffset} + ${mpiDimRep.localLattice} - 1)/_${field.name}_skip_size
                                         + 1 - ${fieldMPIDimRep.localOffset};
}

    @# Now set the alloc_size variable for the field
    @set $indices = range(0, len(field.dimensions))
    @silent indices.remove(field.indexOfDimensionName($mpiDimension.name))
_${field.name}_alloc_size = ${fieldMPIDimRep.localLattice} * ${field.pointsInDimensionsWithIndices($indices)};

  @end for
  @#
@end def
