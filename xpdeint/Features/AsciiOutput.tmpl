@*
AsciiOutput.tmpl

Created by Graham Dennis on 2007-09-18.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Features.OutputFeature

@def description: ascii output

@*
  Write out the data in ASCII format
*@
@def writeOutFunctionImplementationBody($dict)
  @# The function prototype in which this code is going is:
  @#  void _mgN_write_out(FILE* _outfile)
  @# And this code is being automatically indented.
  @#
  @set $fp = dict['fp']
  @set $field = dict['field']
  @set $space = dict['space']
  @#
${writeOutFunctionImplementationBegin(dict)}@slurp
  
  @set $dependentVariables = $dict.dependentVariables
fprintf($fp, "    <Stream><Metalink Format=\"Text\" Delimiter=\" \\n\"/>\n");

  @set $vectors = set([variable['vector'] for variable in dependentVariables])
$loopOverFieldInSpaceWithVectorsAndInnerContent(field, space, vectors, $insideOutputLoops(dict), $kspaceAscendingOrder=True, vectorsNotNeedingDefines=vectors)@slurp

fprintf($fp, "    </Stream>\n");

${writeOutFunctionImplementationEnd(dict)}@slurp
  @#
@end def

@def insideOutputLoops(dict)
  @#
  @set $fp = dict['fp']
  @set $dependentVariables = dict['dependentVariables']
  @set $field = dict['field']
  @set $space = dict['space']
  @#
  @set $componentCount = 0
  @for $variable in $dependentVariables
    @set $componentCount += len($variable.vector.components)
    @if $variable.vector.type == 'complex'
      @set $componentCount += len($variable.vector.components)
    @end if
  @end for
  @#
  @set dict['componentCount'] = componentCount
  @set $variableCount = len($field.dimensions) + componentCount
  @set $precisionPrefix = '.12'
  @if $precision == 'single'
    @set $precisionPrefix = ''
  @end if
fprintf($fp, "@slurp
  @# Loop over the variables that we're writing out
  @for $variableNumber in range($variableCount)
    @if $variableNumber != 0
      @# If this isn't the first dimension, include a space at the start
 %${precisionPrefix}e@slurp
    @else
%${precisionPrefix}e@slurp
    @end if
  @end for
\n"@slurp
  @#
  @for $dimension in $field.dimensions
, (double)${dimension.inSpace(space).name}@slurp
  @end for
  @#
  @# Now loop over the (dependent) variables
  @for $variable in $dependentVariables
    @for $componentNumber, $component in enumerate($variable.components)
      @if $variable.vector.type == 'double'
, ${variable.arrayName}[_${variable.vector.id}_index_pointer + ${componentNumber}]@slurp
      @else
, ${variable.arrayName}[_${variable.vector.id}_index_pointer + ${componentNumber}].re, ${variable.arrayName}[_${variable.vector.id}_index_pointer + ${componentNumber}].im@slurp
      @end if
    @end for
  @end for
);
  @#
@end def