@*
Output.tmpl

Created by Graham Dennis on 2007-08-26.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Features._Feature
@from xpdeint.Utilities import lazy_property

@def description: output
@attr $featureName = 'Output'

@@lazy_property
@def outputGroups
  @return len($momentGroups)
@end def

@def functionPrototypes
  @#
  @super
  @#
void _write_output();
  @#
@end def

@def functionImplementations
  @#
  @super
  @#
${writeOutFunctionImplementation}@slurp
  @#
@end def

@def writeOutFunctionImplementation
void _write_output()
{
  _LOG(_SIMULATION_LOG_LEVEL, "Generating output for ${simulationName}\n");
  
  @if not $momentGroups
  _LOG(_SIMULATION_LOG_LEVEL, "Warning: No output moment groups.\n");
  @else
    @set $featureOrdering = ['Driver', 'ChunkedOutput']
  ${insertCodeForFeatures('writeOutBegin', featureOrdering), autoIndent=True}@slurp
  
  ${outputFormat.writeOutSetup(c'"$filename"'), autoIndent=True}@slurp
  
    @for $momentGroup in $momentGroups
  ${momentGroup.functions['writeOut'].call(_outfile = '_outfile')}
    @end for
  
  ${outputFormat.writeOutTearDown, autoIndent=True}@slurp
  
  ${insertCodeForFeaturesInReverseOrder('writeOutEnd', featureOrdering), autoIndent=True}@slurp
  @end if
}
@end def

@def writeOutFunctionImplementationBody($dict)
  @silent dict.setdefault('baseFilename', c'"$filename"')
  @silent dict.setdefault('outputGroupFilenameSuffix', '_' + dict['caller'].name)
${outputFormat.writeOutFunctionImplementationBody(dict)}@slurp
@end def

@def mainEnd($dict)

_write_output();
@end def

@def integrateFixedStepInnerLoopEnd($dict)
  @#
  @set $integrator = dict['caller']
  @assert len($momentGroups) == len($integrator.samples)
  @#
  @for $momentGroupNumber, $sampleCount in enumerate($integrator.samples)
    @if $sampleCount > 0
      @assert ($integrator.stepCount % $sampleCount) == 0
      @set $sampleEveryNthStep = $integrator.stepCount / $sampleCount
if ((_istep % $sampleEveryNthStep) == ${sampleEveryNthStep - 1})
  _mg${momentGroupNumber}_sample();
    @end if
  @end for
  @#
@end def

@def integrateAdaptiveStepOuterLoopEnd($dict)
  @#
  @set $integrator = dict['caller']
  @assert len($momentGroups) == len($integrator.samples)
  @#
if (_break_next) {
  @for $momentGroupNumber, $sampleCount in enumerate($integrator.samples)
  if (_next_sample_flag[$momentGroupNumber]) {
    _mg${momentGroupNumber}_sample();
    _next_sample_counter[$momentGroupNumber]++;
  }
  @end for
  @set $momentGroupCount = len($integrator.samples)
  if (_next_sample_flag[${momentGroupCount}])
    _next_sample_flag[${momentGroupCount + 1}] = true;
  else {
    _break_next = false;
    _${propagationDimension}_break_next = _${integrator.name}_setup_sampling(_next_sample_flag, _next_sample_counter);
  }
}

if ( (${propagationDimension} - _${propagationDimension}_ini + _step)*(1.0 + _EPSILON) > _${propagationDimension}_break_next) {
  _break_next = true;
  _LOG(_SAMPLE_LOG_LEVEL, "Current timestep: %e\n", _old_step);
  _step = _${propagationDimension}_break_next - ${propagationDimension} + _${propagationDimension}_ini;
}
@end def
