@*
FourierTransformFFTW3.tmpl

Created by Graham Dennis on 2007-08-23.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Features.FourierTransform

@def description: FFTW3

@attr $planType = "FFTW_MEASURE"
@attr $wisdomExtension = '.fftw3'

@def cflags
@*doc:
Return the options that need to be added to ``CFLAG``.
*@
  @#
-lfftw3@slurp
  @#
@end def

@def includes
  @#
  @super
  @#
#include <fftw3.h>
#include <utility>
#include <map>
@end def

@# defines
@def defines
  @#
  @super
  @#
#define xmds_malloc fftw_malloc
#define xmds_free   fftw_free
@end def

@def globals
@*doc:
Return the string defining the globals needed by FFTW3.
*@
  @#
  @super
  @#
  @# The basic idea here is that in addition to the full forward/backward plans
  @# we should store plans for every other arbitrary space transform that we do.
  @# For the moment, these transforms will be generated during the simulation as
  @# they are needed. Because they are generated after initialisation, we can't
  @# use anything other than FFTW_ESTIMATE planning because FFTW_MEASURE and
  @# FFTW_PATIENT both overwrite the arrays in the testing process. Eventually
  @# this will be fixed by creating these plans as well at the start.
  @#
  @# So this code creates a map from (old_space, new_space) pairs to a
  @# _space_transform structure which describes the fourier transform(s) required
  @# for this operation. E.g. if you go from x ky z to kx y z, then you need two
  @# transforms, one forward transform to send x to kx, and one reverse transform
  @# to send ky to y. This is why there is both a _forward_plan and a 
  @# _backward_plan in the _space_transform structure.
  @#
typedef pair<unsigned long, unsigned long> _spaces_pair;

// Less than operator needed by the C++ map class
struct _spaces_pair_less_than
{
  bool operator()(const _spaces_pair& _x, const _spaces_pair& _y) const {
    return (_x.first < _y.first) || ((_x.first == _y.first) && (_x.second < _y.second));
  }
};

enum _transform_type {
  _LOCAL_DFT_TRANSFORM
  , _LOCAL_R2R_TRANSFORM
@#  , _MPI_DFT_TRANSFORM
@#  , _MPI_R2R_TRANSFORM
};

typedef pair<fftw_plan, _transform_type> _plan_pair;
// Structure to hold the fourier transform plans for an arbitrary change of space
struct _space_transform
{
  vector<_plan_pair> _plans;
  double _c;
  
  _space_transform(double _c_in = 1.0) : _c(_c_in) {}
  
  _space_transform(const _space_transform& _s) : _plans(_s._plans), _c(_s._c) {}
};

// Map type for holding (old_space, new_space) -> _space_transform mappings
typedef map<_spaces_pair, _space_transform, _spaces_pair_less_than> _plan_map;

  @for $field in $fields
    @# only loop over those vectors that need fourier transforms
    @for $vector in filter(lambda x: x.needsFourierTransforms, $field.vectors)
${planGlobalsForVector(vector)}@slurp
    @end for
  @end for
@end def

@def planGlobalsForVector($vector)
  @#
_plan_map _${vector.id}_plan_map;
  @#
@end def

@def mainBegin($dict)
// load wisdom and create plans for fft
#if CFG_OSAPI == CFG_OSAPI_POSIX // Don't load wisdom on windows
${loadWisdom}@slurp
#endif // POSIX

_LOG(_SIMULATION_LOG_LEVEL, "Making FFTW plans\n");

  @#
  @# Some of the vectors that we need to create plans for may be temporary vectors,
  @# and hence will not be allocated yet.
  @# The solution is to work out the largest of these vectors, allocate space for that,
  @# and use that to create the plans. Unless we can use another vector that we have
  @# already allocated.
  @#
  @set $temporaryVectorsNeedingFourierTransforms = set()
  @set $managedVectorsNeedingFourierTransforms = set()
  @for field in $fields
    @silent temporaryVectorsNeedingFourierTransforms.update(filter(lambda x: x.needsFourierTransforms, field.temporaryVectors))
    @silent managedVectorsNeedingFourierTransforms.update(filter(lambda x: x.needsFourierTransforms, field.managedVectors))
  @end for
  @if temporaryVectorsNeedingFourierTransforms
    @# We have vectors that need something to be allocated
    @set $temporaryVectorSizes = [(vector.field.maxPoints * vector.nComponents, vector) for vector in temporaryVectorsNeedingFourierTransforms]
    @set $managedVectorSizes = [(vector.field.maxPoints * vector.nComponents, vector) for vector in managedVectorsNeedingFourierTransforms]
    @set $maxTemporaryVectorAndSize = max(temporaryVectorSizes)
    @if managedVectorSizes
      @set $maxManagedVectorAndSize = max(managedVectorSizes)
    @else
      @set $maxManagedVectorAndSize = (0, None)
    @end if
    @#
    @# If the maximum temporary vector is bigger than the maximum managed vector, then we really do need to allocate an array
    @if $maxTemporaryVectorAndSize[0] > $maxManagedVectorAndSize[0]
      @set $maxVector = $maxTemporaryVectorAndSize[1]
      @set $allocatedTemporaryVector = True

// allocate an array so we can create plans for those vectors that we have not allocated yet
complex* _temporary_vector = (complex*) xmds_malloc(sizeof(complex) * ${allocSizeOfVector(maxVector)});
    @else
      @# The maximum managed vector is larger than the maximum temporary vector, so there's no point in allocating an array
      @set $allocatedTemporaryVector = False
      @set $maxVector = $maxManagedVectorAndSize[1]
      
// just use the _${maxVector.id} array for creating plans for those vectors that we have not allocated yet
complex* _temporary_vector = _${maxVector.id};
    @end if
  @end if

fftw_plan _plan;
fftw_iodim _forward_sizes[${len($geometry.dimensions)}], _forward_loop_sizes[${len($geometry.dimensions) + 1}];
fftw_iodim _backward_sizes[${len($geometry.dimensions)}], _backward_loop_sizes[${len($geometry.dimensions) + 1}];
fftw_iodim _r2r_sizes[${len($geometry.dimensions)}], _r2r_loop_sizes[${len($geometry.dimensions) + 1}];
fftw_iodim *_forward_iodim_ptr = NULL, *_backward_iodim_ptr = NULL, *_r2r_iodim_ptr;
fftw_r2r_kind _r2r_kind[${len($geometry.dimensions)}];

int _forward_sizes_index, _backward_sizes_index, _r2r_sizes_index;
int _forward_loop_sizes_index, _backward_loop_sizes_index, _r2r_loop_sizes_index;
double _c;
  @#
  @for field in $fields
    @if len(filter(lambda x: x.needsFourierTransforms, field.vectors)) == 0
      @continue
    @end if

// Plans for field ${field.name}
${createGuruPlansForField(field)}@slurp

  @end for
  @#
  @if $temporaryVectorsNeedingFourierTransforms and $allocatedTemporaryVector
xmds_free(_temporary_vector);
_temporary_vector = NULL;


  @end if
#if CFG_OSAPI == CFG_OSAPI_POSIX // Don't load wisdom on windows
${saveWisdom}@slurp
#endif // POSIX

_LOG(_SIMULATION_LOG_LEVEL, "FFTW planning complete\n");
@end def

@def createGuruPlansForField($field)
  @#
  @set $blankLineSeparator = ''
  @set $vectorsNeedingFourierTransforms = filter(lambda x: x.needsFourierTransforms, field.vectors)
  @#
  @for vector in vectorsNeedingFourierTransforms
${blankLineSeparator}@slurp
    @set $blankLineSeparator = '\n'
    @set $numberOfSpacesNeeded = len(vector.spacesNeeded)
unsigned long _spaces_needed_for_${vector.id}[] = {${', '.join([str(space) for space in vector.spacesNeeded])}};

for (int _from_space_index = 0; _from_space_index < ${numberOfSpacesNeeded}; _from_space_index++) {
  unsigned long _from_space = _spaces_needed_for_${vector.id}[_from_space_index];
  for (int _to_space_index = 0; _to_space_index < ${numberOfSpacesNeeded}; _to_space_index++) {
    unsigned long _to_space = _spaces_needed_for_${vector.id}[_to_space_index];
    if (_from_space == _to_space)
      continue;
    
    _forward_sizes_index = _backward_sizes_index = _r2r_sizes_index = 0;
    _forward_loop_sizes_index = _backward_loop_sizes_index = _r2r_loop_sizes_index = 0;
    _plan = NULL;
    _c = 1.0;
    @for $dimension in $vector.field.dimensions
      @set $fieldDimensionNumber = $vector.field.indexOfDimension($dimension)
      @set $geometryDimensionNumber = $geometry.indexOfDimension($dimension)
      @# All spaces are defined relative to the dimension ordering in the geometry
      @set $bitMask = 1 << $geometryDimensionNumber
    
    // Set sizes for transforms in dimension '$dimension.name'
    _forward_iodim_ptr = _backward_iodim_ptr = _r2r_iodim_ptr = NULL;
      @if $dimension.transform == self
    if ( !(_from_space & ${bitMask}) && (_to_space & ${bitMask})) {
      // Forward ${transformNameMap[dimension.name]} transform for '$dimension.name'
        @if $transformNameMap[dimension.name] == 'dft'
      _forward_iodim_ptr = &_forward_sizes[_forward_sizes_index++];
        @else
      _r2r_iodim_ptr = &_r2r_sizes[_r2r_sizes_index];
          @if $transformNameMap[dimension.name] == 'dct'
      _r2r_kind[_r2r_sizes_index++] = FFTW_REDFT10;
          @else
      _r2r_kind[_r2r_sizes_index++] = FFTW_RODFT10;
          @end if
        @end if
      _c *= ${dimension.representations[0].stepSize} * _inverse_sqrt_2pi;
    } else if ( (_from_space & ${bitMask}) && !(_to_space & ${bitMask}) ) {
      // Backward ${transformNameMap[dimension.name]} transform for '$dimension.name'
        @if $transformNameMap[dimension.name] == 'dft'
      _backward_iodim_ptr = &_backward_sizes[_backward_sizes_index++];
        @else
      _r2r_iodim_ptr = &_r2r_sizes[_r2r_sizes_index];
          @if $transformNameMap[dimension.name] == 'dct'
      _r2r_kind[_r2r_sizes_index++] = FFTW_REDFT01;
          @else
      _r2r_kind[_r2r_sizes_index++] = FFTW_RODFT01;
          @end if
        @end if
      _c *= ${dimension.representations[1].stepSize} * _inverse_sqrt_2pi;
    }
      @end if
    // if any pointers aren't set, they must be a loop
    if (!_forward_iodim_ptr) _forward_iodim_ptr = &_forward_loop_sizes[_forward_loop_sizes_index++];
    if (!_backward_iodim_ptr) _backward_iodim_ptr = &_backward_loop_sizes[_backward_loop_sizes_index++];
    if (!_r2r_iodim_ptr) _r2r_iodim_ptr = &_r2r_loop_sizes[_r2r_loop_sizes_index++];
    
    _forward_iodim_ptr->n  = ${dimension.inSpace(0).globalLattice};
    _forward_iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range($fieldDimensionNumber + 1, len($vector.field.dimensions)))};
    _forward_iodim_ptr->os = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range($fieldDimensionNumber + 1, len($vector.field.dimensions)))};
    
    _backward_iodim_ptr->n  = _r2r_iodim_ptr->n = _forward_iodim_ptr->n;
    _backward_iodim_ptr->is = _forward_iodim_ptr->is;
    _backward_iodim_ptr->os = _forward_iodim_ptr->os;
    
    _r2r_iodim_ptr->is = 2*_forward_iodim_ptr->is;
    _r2r_iodim_ptr->os = 2*_forward_iodim_ptr->os;
    @end for
    
    // Now the 'components' dimension
    if (_${vector.id}_ncomponents > 1) {
      _forward_iodim_ptr  = &_forward_loop_sizes[_forward_loop_sizes_index++];
      _backward_iodim_ptr = &_backward_loop_sizes[_backward_loop_sizes_index++];
      _r2r_iodim_ptr      = &_r2r_loop_sizes[_r2r_loop_sizes_index++];
      
      _forward_iodim_ptr->n  = _${vector.id}_ncomponents;
      _forward_iodim_ptr->is = 1;
      _forward_iodim_ptr->os = 1;
      
      _backward_iodim_ptr->n  = _forward_iodim_ptr->n;
      _r2r_iodim_ptr->n = 2*_forward_iodim_ptr->n; // a r2r transform is treated as a transform of reals, so there's twice as many to transform
      _backward_iodim_ptr->is = _r2r_iodim_ptr->is = _forward_iodim_ptr->is;
      _backward_iodim_ptr->os = _r2r_iodim_ptr->os = _forward_iodim_ptr->os;
    } else {
      // r2r transforms still require a loop
      _r2r_iodim_ptr = &_r2r_loop_sizes[_r2r_loop_sizes_index++];
      _r2r_iodim_ptr->n  = 2;
      _r2r_iodim_ptr->is = 1;
      _r2r_iodim_ptr->os = 1;
    }
    
    _${vector.id}_plan_map[_spaces_pair(_from_space, _to_space)] = _space_transform(_c);
    
    _space_transform& _transform = _${vector.id}_plan_map[_spaces_pair(_from_space, _to_space)];
    
    if (_forward_sizes_index) {
      // If we have dimensions needing forward transforms, then we need a forward fft plan
      ${createGuruDFTPlanForVector($vector, 'forward'), autoIndent=True}@slurp
    }
    if (_backward_sizes_index) {
      // If we have some dimensions needing backward transforms, then we need a backward fft plan
      ${createGuruDFTPlanForVector($vector, 'backward'), autoIndent=True}@slurp
    }
    if (_r2r_sizes_index) {
      // If we have some dimensions needing r2r transforms, then we need a r2r plan
      ${createGuruR2RPlanForVector($vector), autoIndent=True}@slurp
    }
  }
}

  @end for
  @#
@end def


@def mainEnd($dict)
  @#
  
// destroy plans and save wisdom
  @for field in $fields
${destroyPlansForField(field)}@slurp
  @end for

fftw_cleanup();
  @#
@end def

@def destroyPlansForField($field)
  @#
  @# only loop over those vectors that need fourier transforms
  @for vector in filter(lambda x: x.needsFourierTransforms, field.vectors)
_${vector.id}_plan_map.clear(); // This doesn't actually destroy the fftw_plan objects
  @end for

  @#
@end def


@def goSpaceFunctionContentsForVector($function, $vector)
@*doc:
Returns the ``go_space`` function implementation for vector `vector`.

This writes the function that does the fourier transforming of a specific vector
to and from arbitrary combinations of fourier-space and normal-space.
*@
  @#
// This field may not have all of the dimensions in the geometry, so
// find the space variable for the dimensions we care about
_newSpace &= _${vector.field.name}_full_kspace_mask;
if (_${vector.id}_space == _newSpace)
  return;

double _c = 1.0;

if (_${vector.id}_plan_map.count(_spaces_pair(_${vector.id}_space, _newSpace)) == 0) {
  _LOG(_ERROR_LOG_LEVEL, "Error: We should have plans for every required transform, but it seems we don't for this transform.\n"
                         "       The transform is for the vector '${vector.id}' from space %li to space %li\n.",
                         _${vector.id}_space, _newSpace);
}

_space_transform& _transform = _${vector.id}_plan_map[_spaces_pair(_${vector.id}_space, _newSpace)];
if (_transform._plans.size() == 0) {
  _LOG(_ERROR_LOG_LEVEL, "Error: It looks like we tried to create plans for this transform, but failed.\n"
                         "       The transform was for the vector '${vector.id}' from space %li to space %li\n.",
                         _${vector.id}_space, _newSpace);
}


for (vector<_plan_pair>::iterator _it = _transform._plans.begin(); _it != _transform._plans.end(); ++_it) {
  switch(_it->second) {
    ${executePlanForVector(vector), autoIndent=True}@slurp
    default:
      _LOG(_ERROR_LOG_LEVEL, "Unknown plan type: %i\n", _it->second);
  }
}
_c = _transform._c;

_${vector.id}_space = _newSpace;

${loopOverVectorsWithInnerContentTemplate([$vector], '_active_${vector.id}[$index] *= _c;')}@slurp
  @#
@end def

@def executePlanForVector($vector)
  @#
case _LOCAL_DFT_TRANSFORM:
  fftw_execute_dft(_it->first, reinterpret_cast<fftw_complex*>(_active_${vector.id}),
                               reinterpret_cast<fftw_complex*>(_active_${vector.id}));
  break;
case _LOCAL_R2R_TRANSFORM:
  fftw_execute_r2r(_it->first, reinterpret_cast<double*>(_active_${vector.id}),
                               reinterpret_cast<double*>(_active_${vector.id}));
  break;
  @#
@end def


@def createGuruDFTPlanForVector($vector, $type)
@*doc:
Return the FFTW3 'guru' plan creation call needed for this arbitrary transform.
*@
  @#
  @set $arrayName = c'_${vector.id}'
  @if vector in vector.field.temporaryVectors
    @set $arrayName = '_temporary_vector'
  @end if
  @#
_plan = fftw_plan_guru_dft(_${type}_sizes_index, _${type}_sizes,
                           _${type}_loop_sizes_index, _${type}_loop_sizes,
                           reinterpret_cast<fftw_complex*>(${arrayName}),
                           reinterpret_cast<fftw_complex*>(${arrayName}),
                           FFTW_${type.upper()}, ${planType});

_transform._plans.push_back(_plan_pair(_plan, _LOCAL_DFT_TRANSFORM));
  @#
@end def

@def createGuruR2RPlanForVector($vector)
  @#
  @set $arrayName = c'_${vector.id}'
  @if vector in vector.field.temporaryVectors
    @set $arrayName = '_temporary_vector'
  @end if
  @#
_plan = fftw_plan_guru_r2r(_r2r_sizes_index, _r2r_sizes,
                           _r2r_loop_sizes_index, _r2r_loop_sizes,
                           reinterpret_cast<double*>(${arrayName}),
                           reinterpret_cast<double*>(${arrayName}),
                           _r2r_kind, ${planType});

_transform._plans.push_back(_plan_pair(_plan, _LOCAL_R2R_TRANSFORM));
  @#
@end def
