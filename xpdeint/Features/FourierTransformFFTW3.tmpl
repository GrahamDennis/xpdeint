@*
FourierTransformFFTW3.tmpl

Created by Graham Dennis on 2007-08-23.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Features.FourierTransform

@def description: FFTW3

@attr $planType = "FFTW_MEASURE"
@attr $wisdomExtension = '.fftw3'

@def cflags
@*doc:
Return the options that need to be added to ``CFLAG``.
*@
  @#
-lfftw3@slurp
  @#
@end def

@def includes
  @#
  @super
  @#
#include <fftw3.h>
#include <utility>
#include <map>
@end def

@# defines
@def defines
  @#
  @super
  @#
#define xmds_malloc fftw_malloc
#define xmds_free   fftw_free
@end def

@def globals
@*doc:
Return the string defining the globals needed by FFTW3.
*@
  @#
  @super
  @#
  @# The basic idea here is that in addition to the full forward/backward plans
  @# we should store plans for every other arbitrary space transform that we do.
  @# For the moment, these transforms will be generated during the simulation as
  @# they are needed. Because they are generated after initialisation, we can't
  @# use anything other than FFTW_ESTIMATE planning because FFTW_MEASURE and
  @# FFTW_PATIENT both overwrite the arrays in the testing process. Eventually
  @# this will be fixed by creating these plans as well at the start.
  @#
  @# So this code creates a map from (old_space, new_space) pairs to a
  @# _space_transform structure which describes the fourier transform(s) required
  @# for this operation. E.g. if you go from x ky z to kx y z, then you need two
  @# transforms, one forward transform to send x to kx, and one reverse transform
  @# to send ky to y. This is why there is both a _forward_plan and a 
  @# _backward_plan in the _space_transform structure.
  @#
typedef pair<unsigned long, unsigned long> _spaces_pair;

// Less than operator needed by the C++ map class
struct _spaces_pair_less_than
{
  bool operator()(const _spaces_pair& _x, const _spaces_pair& _y) const {
    return (_x.first < _y.first) || ((_x.first == _y.first) && (_x.second < _y.second));
  }
};

enum _transform_type {
  _LOCAL_TRANSFORM,
  _MPI_TRANSFORM
};

// Structure to hold the fourier transform plans for an arbitrary change of space
struct _space_transform
{
  fftw_plan _forward_plan;
  fftw_plan _backward_plan;
  double _c;
  enum _transform_type _type;
  
  _space_transform() {
    _c = 1.0;
    _forward_plan = _backward_plan = NULL;
    _type = _LOCAL_TRANSFORM;
  }
  
  _space_transform(fftw_plan _f_plan, fftw_plan _b_plan, double _c_in, enum _transform_type _type_in = _LOCAL_TRANSFORM) {
    _c = _c_in;
    _forward_plan = _f_plan;
    _backward_plan = _b_plan;
    _type = _type_in;
  }
  
  _space_transform(const _space_transform& _s) {
    _c = _s._c;
    _forward_plan = _s._forward_plan;
    _backward_plan = _s._backward_plan;
    _type = _s._type;
  }
  
  void destroy()
  {
    if (_forward_plan) {
      fftw_destroy_plan(_forward_plan);
      _forward_plan = NULL;
    }
    if (_backward_plan) {
      fftw_destroy_plan(_backward_plan);
      _backward_plan = NULL;
    }
  }
};

// Map type for holding (old_space, new_space) -> _space_transform mappings
typedef map<_spaces_pair, _space_transform, _spaces_pair_less_than> _plan_map;

  @for $field in $fields
    @# only loop over those vectors that need fourier transforms
    @for $vector in filter(lambda x: x.needsFourierTransforms, $field.vectors)
${planGlobalsForVector(vector)}@slurp
    @end for
  @end for
@end def

@def planGlobalsForVector($vector)
  @#
fftw_plan _${vector.id}_forward_plan = NULL;
fftw_plan _${vector.id}_backward_plan = NULL;
_plan_map _${vector.id}_plan_map;
  @#
@end def

@# do the (forward/backward) transform for the vector
@def fullFFTForVector($vector, $type)
${executeGuruPlanForVector(c'_${vector.id}_${type}_plan', vector)}@slurp
@end def


@def mainBegin($dict)
// load wisdom and create plans for fft
#ifdef POSIX
${loadWisdom}@slurp
#endif //POSIX

_LOG(_SIMULATION_LOG_LEVEL, "Making FFTW plans\n");

  @#
  @# Some of the vectors that we need to create plans for may be temporary vectors,
  @# and hence will not be allocated yet.
  @# The solution is to work out the largest of these vectors, allocate space for that,
  @# and use that to create the plans. Unless we can use another vector that we have
  @# already allocated.
  @#
  @set $temporaryVectorsNeedingFourierTransforms = set()
  @set $managedVectorsNeedingFourierTransforms = set()
  @for field in $fields
    @silent temporaryVectorsNeedingFourierTransforms.update(filter(lambda x: x.needsFourierTransforms, field.temporaryVectors))
    @silent managedVectorsNeedingFourierTransforms.update(filter(lambda x: x.needsFourierTransforms, field.managedVectors))
  @end for
  @if temporaryVectorsNeedingFourierTransforms
    @# We have vectors that need something to be allocated
    @set $temporaryVectorSizes = [(vector.field.pointsInDimensionsNumerically * vector.nComponents, vector) for vector in temporaryVectorsNeedingFourierTransforms]
    @set $managedVectorSizes = [(vector.field.pointsInDimensionsNumerically * vector.nComponents, vector) for vector in managedVectorsNeedingFourierTransforms]
    @set $maxTemporaryVectorAndSize = max(temporaryVectorSizes)
    @if managedVectorSizes
      @set $maxManagedVectorAndSize = max(managedVectorSizes)
    @else
      @set $maxManagedVectorAndSize = (0, None)
    @end if
    @#
    @# If the maximum temporary vector is bigger than the maximum managed vector, then we really do need to allocate an array
    @if $maxTemporaryVectorAndSize[0] > $maxManagedVectorAndSize[0]
      @set $maxVector = $maxTemporaryVectorAndSize[1]
      @set $allocatedTemporaryVector = True

// allocate an array so we can create plans for those vectors that we have not allocated yet
complex* _temporary_vector = (complex*) xmds_malloc(sizeof(complex) * ${allocSizeOfVector(maxVector)});
    @else
      @# The maximum managed vector is larger than the maximum temporary vector, so there's no point in allocating an array
      @set $allocatedTemporaryVector = False
      @set $maxVector = $maxManagedVectorAndSize[1]
      
// just use the _${maxVector.id} array for creating plans for those vectors that we have not allocated yet
complex* _temporary_vector = _${maxVector.id};
    @end if
  @end if

fftw_plan _forward_plan, _backward_plan;
fftw_iodim _forward_sizes[${len($geometry.dimensions)}], _backward_sizes[${len($geometry.dimensions)}], _loop_sizes[${len($geometry.dimensions) + 1}];
fftw_iodim *_iodim_ptr = NULL;

int _forward_sizes_index, _backward_sizes_index, _loop_sizes_index;
double _c;
  @#
  @for field in $fields
    @if len(filter(lambda x: x.needsFourierTransforms, field.vectors)) == 0
      @continue
    @end if

// Plans for field ${field.name}
${createGuruPlansForField(field)}@slurp

  @end for
  @#
  @if $temporaryVectorsNeedingFourierTransforms and $allocatedTemporaryVector
xmds_free(_temporary_vector);
_temporary_vector = NULL;


  @end if
#ifdef POSIX
${saveWisdom}@slurp
#endif //POSIX

_LOG(_SIMULATION_LOG_LEVEL, "FFTW planning complete\n");
@end def

@def createGuruPlansForField($field)
  @#
  @set $blankLineSeparator = ''
  @set $vectorsNeedingFourierTransforms = filter(lambda x: x.needsFourierTransforms, field.vectors)
  @#
  @for vector in vectorsNeedingFourierTransforms
${blankLineSeparator}@slurp
    @set $blankLineSeparator = '\n'
    @set $numberOfSpacesNeeded = len(vector.spacesNeeded)
unsigned long _spaces_needed_for_${vector.id}[] = {${', '.join([str(space) for space in vector.spacesNeeded])}};

for (int _from_space_index = 0; _from_space_index < ${numberOfSpacesNeeded}; _from_space_index++) {
  unsigned long _from_space = _spaces_needed_for_${vector.id}[_from_space_index];
  for (int _to_space_index = 0; _to_space_index < ${numberOfSpacesNeeded}; _to_space_index++) {
    unsigned long _to_space = _spaces_needed_for_${vector.id}[_to_space_index];
    if (_from_space == _to_space)
      continue;
    
    _forward_sizes_index = _backward_sizes_index = _loop_sizes_index = 0;
    _forward_plan = _backward_plan = NULL;
    _c = 1.0;
    @for $dimension in $vector.field.dimensions
      @set $fieldDimensionNumber = $vector.field.indexOfDimension($dimension)
      @set $geometryDimensionNumber = $geometry.indexOfDimension($dimension)
      @# All spaces are defined relative to the dimension ordering in the geometry
      @set $bitMask = 1 << $geometryDimensionNumber
    
      @if $dimension.type == 'double'
    // Set sizes for transforms in dimension '$dimension.name'
    if ( !(_from_space & ${bitMask}) && (_to_space & ${bitMask})) {
      // Forward transform for '$dimension.name'
      _iodim_ptr = &_forward_sizes[_forward_sizes_index++];
      _c *= _${vector.field.name}_d${dimension.name} * _inverse_sqrt_2pi;
    } else if ( (_from_space & ${bitMask}) && !(_to_space & ${bitMask}) ) {
      // Backward transform for '$dimension.name'
      _iodim_ptr = &_backward_sizes[_backward_sizes_index++];
      _c *= _${vector.field.name}_dk${dimension.name} * _inverse_sqrt_2pi;
    } else {
      // No transform, simply loop over dimension '$dimension.name'
      _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
    }
      @else
    // Loop over integer-valued dimension '$dimension.name'
    _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
      @end if
    
    _iodim_ptr->n  = _${vector.field.name}_lattice_${dimension.name};
    _iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range($fieldDimensionNumber + 1, len($vector.field.dimensions)))};
    _iodim_ptr->os = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range($fieldDimensionNumber + 1, len($vector.field.dimensions)))};
    @end for
    
    // Now the 'components' dimension
    if (_${vector.id}_ncomponents > 1) {
      _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
      
      _iodim_ptr->n  = _${vector.id}_ncomponents;
      _iodim_ptr->is = 1;
      _iodim_ptr->os = 1;
    }
    
    if (_forward_sizes_index) {
      // If we have dimensions needing forward transforms, then we need a forward fft plan
      ${createGuruPlanForVector($vector, 'forward'), autoIndent=True}@slurp
    }
    if (_backward_sizes_index) {
      // If we have some dimensions needing backward transforms, then we need a backward fft plan
      ${createGuruPlanForVector($vector, 'backward'), autoIndent=True}@slurp
    }
    
    if (_from_space == 0 && _to_space == _${vector.field.name}_full_kspace_mask) {
      _${vector.id}_forward_plan = _forward_plan;
    } else if (_from_space == _${vector.field.name}_full_kspace_mask && _to_space == 0) {
      _${vector.id}_backward_plan = _backward_plan;
    } else {
      _${vector.id}_plan_map[_spaces_pair(_from_space, _to_space)] = _space_transform(_forward_plan, _backward_plan, _c);
    }
  }
}

  @end for
  @#
@end def


@def mainEnd($dict)
  @#
  
// destroy plans and save wisdom
  @for field in $fields
${destroyPlansForField(field)}@slurp
  @end for

fftw_cleanup();
  @#
@end def

@def destroyPlansForField($field)
  @#
  @# only loop over those vectors that need fourier transforms
  @for vector in filter(lambda x: x.needsFourierTransforms, field.vectors)
fftw_destroy_plan(_${vector.id}_forward_plan);
fftw_destroy_plan(_${vector.id}_backward_plan);
for (_plan_map::iterator _it = _${vector.id}_plan_map.begin(); _it != _${vector.id}_plan_map.end(); _it++)
  _it->second.destroy();
_${vector.id}_plan_map.clear();
  @end for

  @#
@end def


@def mixedTransformsForVector($vector)
@*doc:
Return the mixed-transform part of the ``go_space`` function for fourier transforming
a vector `vector` to an arbitrary space.

This FFTW3 version of this function makes use of the 'guru' function interface provided.
The 'guru' interface allows a multi-dimensional loop of fourier transforms to be specified
in one plan. This means that an arbitrary change of space can be achieved with a single
``fftw_execute_dft`` call.
*@
  @#
// Mixed transform stuff
fftw_plan _forward_plan = NULL;
fftw_plan _backward_plan = NULL;

// If we have not already created the plan, we must exit as we should have already made it.
if (_${vector.id}_plan_map.count(_spaces_pair(_${vector.id}_space, _newSpace)) == 0) {
  _LOG(_ERROR_LOG_LEVEL, "Error: We should have plans for every required transform, but it seems we don't for this transform.\n"
                         "       The transform is for the vector '${vector.id}' from space %li to space %li\n.",
                         _${vector.id}_space, _newSpace);
  // _LOG will cause the simulation to exit
} else {
  // We have already generated this plan, so just grab it
  _space_transform& _transform = _${vector.id}_plan_map[_spaces_pair(_${vector.id}_space, _newSpace)];
  
  _forward_plan = _transform._forward_plan;
  _backward_plan = _transform._backward_plan;
  _c = _transform._c;
}

// If we have a forward plan, run it
if (_forward_plan) {
  ${executeGuruPlanForVector('_forward_plan', $vector), autoIndent=True}@slurp
}
// If we have a backward plan, run it
if (_backward_plan) {
  ${executeGuruPlanForVector('_backward_plan', $vector), autoIndent=True}@slurp
}

  @#
@end def


@def createGuruPlanForVector($vector, $type)
@*doc:
Return the FFTW3 'guru' plan creation call needed for this arbitrary transform.
*@
  @#
  @set $arrayName = c'_${vector.id}'
  @if vector in vector.field.temporaryVectors
    @set $arrayName = '_temporary_vector'
  @end if
  @#
_${type}_plan = fftw_plan_guru_dft(_${type}_sizes_index, _${type}_sizes,
                                   _loop_sizes_index, _loop_sizes,
                                   reinterpret_cast<fftw_complex*>(${arrayName}),
                                   reinterpret_cast<fftw_complex*>(${arrayName}),
                                   FFTW_${type.upper()}, ${planType});
  @#
@end def

@def executeGuruPlanForVector($planName, $vector)
@*doc:
Return the execution call for a plan in a variable named `planName` for a vector `vector`.
*@
  @#
fftw_execute_dft($planName, reinterpret_cast<fftw_complex*>(_active_${vector.id}),
                 reinterpret_cast<fftw_complex*>(_active_${vector.id}));
  @#
@end def

