@*
FourierTransformFFTW3MPI.tmpl

Created by Graham Dennis on 2008-06-06.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Features._FourierTransformFFTW3MPI

@def description: FFTW3 with MPI
@attr $wisdomExtension = '.fftw3_mpi'


@def cflags
@*doc:
Return the options that need to be added to ``CFLAG``.
*@
  @super
  @#
 -lfftw3_mpi@slurp
  @#
@end def

@def includes
  @#
  @super
  @#
#include <fftw3-mpi.h>
@end def

@def planGlobalsForVector($vector)
  @#
  @if not $vectorNeedsPartialTransforms(vector)
    @super(vector)
  @else
fftw_plan _${vector.id}_forward_plan = NULL;
fftw_plan _${vector.id}_backward_plan = NULL;
_plan_map _${vector.id}_unswapped_plan_map;
_plan_map _${vector.id}_swapped_plan_map;
_space_transform _${vector.id}_partial_2d_forward;
_space_transform _${vector.id}_partial_2d_backward;
_space_transform _${vector.id}_partial_2d_untransposing_forward;
_space_transform _${vector.id}_partial_2d_untransposing_backward;
_space_transform _${vector.id}_partial_unswapped_forward;
_space_transform _${vector.id}_partial_unswapped_backward;
_space_transform _${vector.id}_partial_swapped_forward;
_space_transform _${vector.id}_partial_swapped_backward;
_space_transform _${vector.id}_partial_transpose;
_space_transform _${vector.id}_partial_untranspose;
  @end if
  @#
@end def

@def mainBegin($dict)
  @#
fftw_mpi_init();
ptrdiff_t _fft_sizes[${len($geometry.dimensions)}];
  @super($dict)
  @#
@end def

@def loadWisdom
  @#
  @super
  @#
fftw_mpi_broadcast_wisdom(MPI_COMM_WORLD);
  @#
@end def

@def saveWisdom
  @#
fftw_mpi_gather_wisdom(MPI_COMM_WORLD);
  @#
  @super
  @#
@end def


@def createGuruPlansForField($field)
  @#
  @if not $_driver.isFieldDistributed(field)
    @super($field)
  @end if
  @#
  @set $blankLineSeparator = ''
  @set $vectorsNeedingFourierTransforms = filter(lambda x: x.needsFourierTransforms, field.vectors)
  @#
  @for vector in vectorsNeedingFourierTransforms
${blankLineSeparator}@slurp
    @set $blankLineSeparator = '\n'
    @#
    @set $doubleDimensions = [d for d in vector.field.dimensions if d.type == 'double']
    @set $integerDimensions = [d for d in vector.field.dimensions if d.type == 'long']
    @set $arrayName = c'_${vector.id}'
    @if vector in vector.field.temporaryVectors
      @set $arrayName = '_temporary_vector'
    @end if
    @#
${'\n'.join([c'_fft_sizes[$i] = _${vector.field.name}_lattice_${dimension.name};' for (i, dimension) in enumerate(doubleDimensions)])}
_howmany = ((ptrdiff_t)1)${''.join([c'*_${vector.field.name}_lattice_${dimension.name}' for dimension in integerDimensions])}*_${vector.id}_ncomponents;
_${vector.id}_forward_plan  = fftw_mpi_plan_many_dft(${len(doubleDimensions)}, _fft_sizes, _howmany, _unswapped_block_size, _swapped_block_size, 
                                                     reinterpret_cast<fftw_complex*>($arrayName),
                                                     reinterpret_cast<fftw_complex*>($arrayName),
                                                     MPI_COMM_WORLD, FFTW_FORWARD, ${planType} | FFTW_MPI_TRANSPOSED_OUT);
_${vector.id}_backward_plan = fftw_mpi_plan_many_dft(${len(doubleDimensions)}, _fft_sizes, _howmany, _swapped_block_size, _unswapped_block_size,
                                                     reinterpret_cast<fftw_complex*>($arrayName),
                                                     reinterpret_cast<fftw_complex*>($arrayName),
                                                     MPI_COMM_WORLD, FFTW_BACKWARD, ${planType} | FFTW_MPI_TRANSPOSED_IN);

    @if $vectorNeedsPartialTransforms(vector)
      @# The idea here is to break the process of going from one space to another into two stages
      @# the first involving MPI, the second is purely local.
      @# In the first stage, the space of the first two dimensions are changed from their initial
      @# space to their values in the final space.
      @# In the second stage, local fourier transforms are performed on each node to perform the
      @# remaining transforms necessary.
      @# For more details on the transforms and transposes involved in the first stage, see
      @# "FFTW3MPI Design.pdf" in the doc/ directory of the repository.
// First create plans for changing the spaces of the first two dimensions arbitrarily
// then create (local) plans for the rest of the transforms
      @set $firstMPIDimName = $_driver.firstMPIDimension.name
      @set $secondMPIDimName = $_driver.secondMPIDimension.name

// 1a. Create plans for the 2D forward and reverse transforms.
_howmany = ((ptrdiff_t)1)${''.join([c'*_${vector.field.name}_lattice_${dimension.name}' for dimension in vector.field.dimensions[2:]])}*_${vector.id}_ncomponents;
_forward_plan  = fftw_mpi_plan_many_dft(2, _fft_sizes, _howmany, _unswapped_block_size, _swapped_block_size,
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        MPI_COMM_WORLD, FFTW_FORWARD, ${planType} | FFTW_MPI_TRANSPOSED_OUT);

if (!_forward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial 2D forward plan for vector ${vector.id}\n");

_c = ${'*'.join([c'_${vector.field.name}_d${dimName}' for dimName in $_driver.distributedDimensionNames])} / (2.0 * M_PI);
_${vector.id}_partial_2d_forward = _space_transform(_forward_plan, NULL, _c, _MPI_TRANSFORM);

_forward_plan  = fftw_mpi_plan_many_dft(2, _fft_sizes, _howmany, _unswapped_block_size, _unswapped_block_size,
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        MPI_COMM_WORLD, FFTW_FORWARD, ${planType});

if (!_forward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial 2D untransposing forward plan for vector ${vector.id}\n");

_${vector.id}_partial_2d_untransposing_forward = _space_transform(_forward_plan, NULL, _c, _MPI_TRANSFORM);

_backward_plan = fftw_mpi_plan_many_dft(2, _fft_sizes, _howmany, _swapped_block_size, _unswapped_block_size,
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        MPI_COMM_WORLD, FFTW_BACKWARD, ${planType} | FFTW_MPI_TRANSPOSED_IN);
if (!_backward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial 2D backward plan for vector ${vector.id}\n");

_c = ${'*'.join([c'_${vector.field.name}_dk${dimName}' for dimName in $_driver.distributedDimensionNames])} / (2.0 * M_PI);
_${vector.id}_partial_2d_backward = _space_transform(NULL, _backward_plan, _c, _MPI_TRANSFORM);

_backward_plan = fftw_mpi_plan_many_dft(2, _fft_sizes, _howmany, _unswapped_block_size, _unswapped_block_size,
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        reinterpret_cast<fftw_complex*>($arrayName),
                                        MPI_COMM_WORLD, FFTW_BACKWARD, ${planType});
if (!_backward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial 2D untransposing backward plan for vector ${vector.id}\n");

_c = ${'*'.join([c'_${vector.field.name}_dk${dimName}' for dimName in $_driver.distributedDimensionNames])} / (2.0 * M_PI);
_${vector.id}_partial_2d_untransposing_backward = _space_transform(NULL, _backward_plan, _c, _MPI_TRANSFORM);

// 1a(ii). Create plans for the untransposing 2D forward and reverse transforms.


// 1b. Create plans for the 2D transpose operations.
_forward_plan  = fftw_mpi_plan_many_transpose(_${vector.field.name}_lattice_${firstMPIDimName},
                                              _${vector.field.name}_lattice_${secondMPIDimName},
                                              _howmany*2, _unswapped_block_size, _swapped_block_size,
                                              reinterpret_cast<double*>($arrayName),
                                              reinterpret_cast<double*>($arrayName),
                                              MPI_COMM_WORLD, ${planType} | FFTW_MPI_TRANSPOSED_OUT);
if (!_forward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial transpose plan for vector ${vector.id}\n");

_${vector.id}_partial_transpose = _space_transform(_forward_plan, NULL, 1.0, _MPI_TRANSFORM);

_backward_plan = fftw_mpi_plan_many_transpose(_${vector.field.name}_lattice_${firstMPIDimName},
                                              _${vector.field.name}_lattice_${secondMPIDimName},
                                              _howmany*2, _unswapped_block_size, _swapped_block_size,
                                              reinterpret_cast<double*>($arrayName),
                                              reinterpret_cast<double*>($arrayName),
                                              MPI_COMM_WORLD, ${planType} | FFTW_MPI_TRANSPOSED_IN);
if (!_backward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial untranspose plan for vector ${vector.id}\n");

_${vector.id}_partial_untranspose = _space_transform(NULL, _backward_plan, 1.0, _MPI_TRANSFORM);

// 1c. Create local plans for unswapped fourier transforms
_forward_sizes_index = _backward_sizes_index = _loop_sizes_index = 0;
//     Loop over the distributed dimension '$firstMPIDimName'
_iodim_ptr     = &_loop_sizes[_loop_sizes_index++];
_iodim_ptr->n  = _${vector.field.name}_local_unswapped_lattice_${firstMPIDimName};
_iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(1, len(vector.field.dimensions)))};
_iodim_ptr->os = _iodim_ptr->is;
//     Forward transform the local MPI dimension '$secondMPIDimName'
_iodim_ptr     = &_forward_sizes[_forward_sizes_index++];
_iodim_ptr->n  = _${vector.field.name}_lattice_${secondMPIDimName};
_iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
_iodim_ptr->os = _iodim_ptr->is;
_c = _${vector.field.name}_d${secondMPIDimName} * _inverse_sqrt_2pi;
//     Loop over any remaining dimensions
_iodim_ptr     = &_loop_sizes[_loop_sizes_index++];
_iodim_ptr->n  = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
_iodim_ptr->is = 1;
_iodim_ptr->os = _iodim_ptr->is;

${createGuruPlanForVector(vector, 'forward')}@slurp
if (!_forward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial unswapped forward plan for vector ${vector.id}\n");
_${vector.id}_partial_unswapped_forward = _space_transform(_forward_plan, NULL, _c, _LOCAL_TRANSFORM);

//     Backward transform the local MPI dimension '$secondMPIDimName'
_iodim_ptr     = &_backward_sizes[_backward_sizes_index++];
_iodim_ptr->n  = _${vector.field.name}_lattice_${secondMPIDimName};
_iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
_iodim_ptr->os = _iodim_ptr->is;
_c = _${vector.field.name}_dk${secondMPIDimName} * _inverse_sqrt_2pi;

${createGuruPlanForVector(vector, 'backward')}@slurp
if (!_backward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial unswapped backward plan for vector ${vector.id}\n");
_${vector.id}_partial_unswapped_backward = _space_transform(NULL, _backward_plan, _c, _LOCAL_TRANSFORM);

// 1d. Create local plans for swapped fourier transforms
//     Loop over the distributed dimension '$secondMPIDimName'
_iodim_ptr     = &_loop_sizes[0];
_iodim_ptr->n  = _${vector.field.name}_local_swapped_lattice_k${secondMPIDimName};
_iodim_ptr->is = _${vector.id}_ncomponents * _${vector.field.name}_lattice_${firstMPIDimName} * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
_iodim_ptr->os = _iodim_ptr->is;
//     Forward transform the local MPI dimension '$firstMPIDimName'
_iodim_ptr     = &_forward_sizes[0];
_iodim_ptr->n  = _${vector.field.name}_lattice_${firstMPIDimName};
_iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
_iodim_ptr->os = _iodim_ptr->is;
_c = _${vector.field.name}_d${firstMPIDimName} * _inverse_sqrt_2pi;
//     Reuse variable for the remaining loop that was constructed above.

${createGuruPlanForVector(vector, 'forward')}@slurp
if (!_forward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial swapped forward plan for vector ${vector.id}\n");
_${vector.id}_partial_swapped_forward = _space_transform(_forward_plan, NULL, _c, _LOCAL_TRANSFORM);

//     Backward transform the local MPI dimension '$firstMPIDimName'
_iodim_ptr     = &_backward_sizes[0];
_iodim_ptr->n  = _${vector.field.name}_lattice_${firstMPIDimName};
_iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
_iodim_ptr->os = _iodim_ptr->is;
_c = _${vector.field.name}_dk${firstMPIDimName} * _inverse_sqrt_2pi;

${createGuruPlanForVector(vector, 'backward')}@slurp
if (!_backward_plan)
  _LOG(_ERROR_LOG_LEVEL, "Unable to create partial swapped backward plan for vector ${vector.id}\n");
_${vector.id}_partial_swapped_backward = _space_transform(NULL, _backward_plan, _c, _LOCAL_TRANSFORM);

// 2. Create local plans for the remainder of the transforms (if needed)
${partialTransformPlansForVector(vector, swapped = False)}@slurp

${partialTransformPlansForVector(vector, swapped = True)}@slurp
    @end if
  @end for
  @#
@end def

@def partialTransformPlansForVector(vector, swapped)
  @#
  @if not swapped
    @set $prefix = '_unswapped'
    @set $baseSpace = 0
  @else
    @set $prefix = '_swapped'
    @set $baseSpace = 6
  @end if
  @#
  @# Set a mask for everything other than the first two (transverse) dimensions
  @set $spaceMask = vector.field.spaceMask & ~6
  @#
  @set $spacesNeeded = set([(space & spaceMask) | baseSpace for space in vector.spacesNeeded if $_driver.isSpaceSwapped(space) == swapped])
  @if len(spacesNeeded) <= 1
    @return
  @end if
  @#
  @set $numberOfSpacesNeeded = len(spacesNeeded)
unsigned long ${prefix}_spaces_needed_for_${vector.id}[] = {${', '.join([str(space) for space in spacesNeeded])}};

for (int _from_space_index = 0; _from_space_index < ${numberOfSpacesNeeded}; _from_space_index++) {
  unsigned long _from_space = ${prefix}_spaces_needed_for_${vector.id}[_from_space_index];
  for (int _to_space_index = 0; _to_space_index < ${numberOfSpacesNeeded}; _to_space_index++) {
    unsigned long _to_space = ${prefix}_spaces_needed_for_${vector.id}[_to_space_index];
    if (_from_space == _to_space)
      continue;
    
    _forward_sizes_index = _backward_sizes_index = _loop_sizes_index = 0;
    _forward_plan = _backward_plan = NULL;
    _c = 1.0;
    
  @if not swapped
    // unswapped case
    // Loop over the distributed dimension '$_driver.firstMPIDimension.name'
    _iodim_ptr     = &_loop_sizes[_loop_sizes_index++];
    _iodim_ptr->n  = _${vector.field.name}_local_unswapped_lattice_${_driver.firstMPIDimension.name};
    _iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(1, len(vector.field.dimensions)))};
    _iodim_ptr->os = _iodim_ptr->is;
    // Loop over the local MPI dimension '$_driver.secondMPIDimension.name'
    _iodim_ptr     = &_loop_sizes[_loop_sizes_index++];
    _iodim_ptr->n  = _${vector.field.name}_lattice_${_driver.secondMPIDimension.name};
    _iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
    _iodim_ptr->os = _iodim_ptr->is;
  @else
    // swapped case
    // Loop over the distributed dimension '$_driver.secondMPIDimension.name'
    _iodim_ptr     = &_loop_sizes[_loop_sizes_index++];
    _iodim_ptr->n  = _${vector.field.name}_local_swapped_lattice_k${_driver.secondMPIDimension.name};
    _iodim_ptr->is = _${vector.id}_ncomponents * _${vector.field.name}_lattice_${_driver.firstMPIDimension.name} * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
    _iodim_ptr->os = _iodim_ptr->is;
    // Loop over the local MPI dimension '$_driver.firstMPIDimension.name'
    _iodim_ptr     = &_loop_sizes[_loop_sizes_index++];
    _iodim_ptr->n  = _${vector.field.name}_lattice_${_driver.firstMPIDimension.name};
    _iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range(2, len(vector.field.dimensions)))};
    _iodim_ptr->os = _iodim_ptr->is;
  @end if
    
  @for $dimension in $vector.field.dimensions[2:]
    @set $fieldDimensionNumber = $vector.field.indexOfDimension($dimension)
    @set $geometryDimensionNumber = $geometry.indexOfDimension($dimension)
    @# All spaces are defined relative to the dimension ordering in the geometry
    @set $bitMask = 1 << $geometryDimensionNumber
    
    @if $dimension.type == 'double'
    // Set sizes for transforms in dimension '$dimension.name'
    if ( !(_from_space & ${bitMask}) && (_to_space & ${bitMask})) {
      // Forward transform for '$dimension.name'
      _iodim_ptr = &_forward_sizes[_forward_sizes_index++];
      _c *= _${vector.field.name}_d${dimension.name} * _inverse_sqrt_2pi;
    } else if ( (_from_space & ${bitMask}) && !(_to_space & ${bitMask}) ) {
      // Backward transform for '$dimension.name'
      _iodim_ptr = &_backward_sizes[_backward_sizes_index++];
      _c *= _${vector.field.name}_dk${dimension.name} * _inverse_sqrt_2pi;
    } else {
      // No transform, simply loop over dimension '$dimension.name'
      _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
    }
    @else
    // Loop over integer-valued dimension '$dimension.name'
    _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
    @end if
    
    _iodim_ptr->n  = _${vector.field.name}_lattice_${dimension.name};
    _iodim_ptr->is = _${vector.id}_ncomponents * ${vector.field.pointsInDimensionsWithIndices(range($fieldDimensionNumber + 1, len($vector.field.dimensions)))};
    _iodim_ptr->os = _iodim_ptr->is;
  @end for
    
    // Now the 'components' dimension
    if (_${vector.id}_ncomponents > 1) {
      _iodim_ptr = &_loop_sizes[_loop_sizes_index++];
      
      _iodim_ptr->n  = _${vector.id}_ncomponents;
      _iodim_ptr->is = 1;
      _iodim_ptr->os = _iodim_ptr->is;
    }
    
    if (_forward_sizes_index) {
      // If we have dimensions needing forward transforms, then we need a forward fft plan
      ${createGuruPlanForVector($vector, 'forward'), autoIndent=True}@slurp
    }
    if (_backward_sizes_index) {
      // If we have some dimensions needing backward transforms, then we need a backward fft plan
      ${createGuruPlanForVector($vector, 'backward'), autoIndent=True}@slurp
    }
    
    _${vector.id}${prefix}_plan_map[_spaces_pair(_from_space, _to_space)] = _space_transform(_forward_plan, _backward_plan, _c, _LOCAL_TRANSFORM);
  }
}

  @#
@end def

@def destroyPlansForField($field)
  @#
  @if not $_driver.isFieldDistributed(field)
    @super($field)
  @end if
  @#
  @# only loop over those vectors that need fourier transforms
  @for vector in filter(lambda x: x.needsFourierTransforms, field.vectors)
fftw_destroy_plan(_${vector.id}_forward_plan);
fftw_destroy_plan(_${vector.id}_backward_plan);
    @if $vectorNeedsPartialTransforms(vector)
    
_${vector.id}_partial_2d_forward.destroy();               _${vector.id}_partial_2d_backward.destroy();
_${vector.id}_partial_2d_untransposing_forward.destroy(); _${vector.id}_partial_2d_untransposing_backward.destroy();
_${vector.id}_partial_unswapped_forward.destroy();        _${vector.id}_partial_unswapped_backward.destroy();
_${vector.id}_partial_swapped_forward.destroy();          _${vector.id}_partial_swapped_backward.destroy();
_${vector.id}_partial_transpose.destroy();                _${vector.id}_partial_untranspose.destroy();

for (_plan_map::iterator _it = _${vector.id}_unswapped_plan_map.begin(); _it != _${vector.id}_unswapped_plan_map.end(); _it++)
  _it->second.destroy();
_${vector.id}_unswapped_plan_map.clear();

for (_plan_map::iterator _it = _${vector.id}_swapped_plan_map.begin(); _it != _${vector.id}_swapped_plan_map.end(); _it++)
  _it->second.destroy();
_${vector.id}_swapped_plan_map.clear();
    @end if
  @end for

  @#
@end def


@def mixedTransformsForVector($vector)
@*doc:
Return the mixed-transform part of the ``go_space`` function for fourier transforming
a vector `vector` to an arbitrary space.

This FFTW3-MPI version of this function uses local ffts, partial 2D MPI ffts and 2D MPI
transpose operations. To see an illustration of the transforms needed to link any two
spaces for the first two dimensions with either being swapped or unswapped see the file
'FFTW3MPI Design.pdf' in the doc/ directory of the repository. Doing things this way should
make mixed-space transforms about as fast as they can be with MPI.
Update: I would do it the fast way with the transpose operations, but they don't seem to be doing
anything. As a result, although the plans are still calculated, nothing is done with them. The operations
for the various transforms between spaces are commented out below. The uncommented versions make use
of untransposing fft's. Not the fastest method, but at least it works.

If you can reduce the number of transforms needed in a given dimension, then doing that for the
first dimension will yield the greatest speedup.
*@
  @#
  @if not $vectorNeedsPartialTransforms(vector)
// No mixed transforms needed
    @stop
  @end if
  @#
// Mixed transform stuff
_space_transform *_transforms[5];
int _transform_index = 0;
unsigned long _2d_oldspace = _${vector.id}_space & 6, _2d_newspace = _newSpace & 6;

// Consider all transforms between the first two dimensions. There are twelve.
// Note that 6 has the second lowest and third lowest bits set corresponding to
// the spaceMask for the first two transverse dimensions.
// These cases are sorted by the number of operations involved (for no good reason)
// Case 1: 00 -> 11
if (_2d_oldspace == 0 && _2d_newspace == 6)
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_forward;
// Case 2: 11 -> 00
else if (_2d_oldspace == 6 && _2d_newspace == 0)
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_backward;
// Case 3: 00 -> 01
else if (_2d_oldspace == 0 && _2d_newspace == 4)
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
// Case 4: 01 -> 00
else if (_2d_oldspace == 4 && _2d_newspace == 0)
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
// Case 5: 01 -> 11
else if (_2d_oldspace == 4 && _2d_newspace == 6) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_transpose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_swapped_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_forward;
}
// Case 6: 11 -> 01
else if (_2d_oldspace == 6 && _2d_newspace == 4) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_swapped_backward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_untranspose;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
}
// Case 7: 10 -> 11
else if (_2d_oldspace == 2 && _2d_newspace == 6) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_transpose;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_untransposing_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_forward;
}
// Case 8: 11 -> 10
else if (_2d_oldspace == 6 && _2d_newspace == 2) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_untranspose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_untransposing_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
}
// Case 9: 00 -> 10
else if (_2d_oldspace == 0 && _2d_newspace == 2) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_transpose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_swapped_forward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_untranspose;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_untransposing_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
}
// Case 10: 10 -> 00
else if (_2d_oldspace == 2 && _2d_newspace == 0) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_transpose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_swapped_backward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_untranspose;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_untransposing_backward;
}
// Case 11: 01 -> 10
else if (_2d_oldspace == 4 && _2d_newspace == 2) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_transpose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_swapped_forward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_untranspose;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_untransposing_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_backward;
}
// Case 12: 10 -> 01
else if (_2d_oldspace == 2 && _2d_newspace == 4) {
  // _transforms[_transform_index++] = &_${vector.id}_partial_transpose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_swapped_backward;
  // _transforms[_transform_index++] = &_${vector.id}_partial_untranspose;
  // _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
  _transforms[_transform_index++] = &_${vector.id}_partial_2d_untransposing_backward;
  _transforms[_transform_index++] = &_${vector.id}_partial_unswapped_forward;
}
else
  _LOG(_ERROR_LOG_LEVEL, "Missing combination of spaces? _2d_oldspace: %lu, _2d_newspace: %lu\n", _2d_oldspace, _2d_newspace);

// Now add the local transform if needed.
if ((_${vector.id}_space & ~6) != (_newSpace & ~6)) {
  // The _spaces_pair we need to look up either has the first two dimensions '0' if unswapped
  // or '1' if swapped, so we need to construct these variables.
  unsigned long _rest_oldspace = _${vector.id}_space & ~6, _rest_newspace = _newSpace & ~6;
  if ((_newSpace & 6) == 6) {
    // swapped
    _rest_oldspace |= 6;
    _rest_newspace |= 6;
    // If we have not already created the plan, we must exit as we should have already made it.
    if (_${vector.id}_swapped_plan_map.count(_spaces_pair(_rest_oldspace, _rest_newspace)) == 0) {
      _LOG(_ERROR_LOG_LEVEL, "Error: We should have plans for every required transform, but it seems we don't for this transform.\n"
                             "       The transform is for the vector '${vector.id}' from space %li to space %li (via %li)\n.",
                             _${vector.id}_space, _newSpace, _rest_oldspace);
      // _LOG will cause the simulation to exit
    }
    _transforms[_transform_index++] = &_${vector.id}_swapped_plan_map[_spaces_pair(_rest_oldspace, _rest_newspace)];
  } else {
    // unswapped
    // If we have not already created the plan, we must exit as we should have already made it.
    if (_${vector.id}_unswapped_plan_map.count(_spaces_pair(_rest_oldspace, _rest_newspace)) == 0) {
      _LOG(_ERROR_LOG_LEVEL, "Error: We should have plans for every required transform, but it seems we don't for this transform.\n"
                             "       The transform is for the vector '${vector.id}' from space %li to space %li (via %li)\n.",
                             _${vector.id}_space, _newSpace, _rest_oldspace);
      // _LOG will cause the simulation to exit
    }
    _transforms[_transform_index++] = &_${vector.id}_unswapped_plan_map[_spaces_pair(_rest_oldspace, _rest_newspace)];
  }
}

_c = 1.0;

int _counter;

for (_counter = 0; _counter < _transform_index; _counter++) {
  _c *= _transforms[_counter]->_c;
  if (_transforms[_counter]->_type == _LOCAL_TRANSFORM) {
    if (_transforms[_counter]->_forward_plan) {
      ${executeLocalGuruPlanForVector('_transforms[_counter]->_forward_plan', vector), autoIndent=True}@slurp
    }
    if (_transforms[_counter]->_backward_plan) {
      ${executeLocalGuruPlanForVector('_transforms[_counter]->_backward_plan', vector), autoIndent=True}@slurp
    }
  } else {
    // _MPI_TRANSFORM
    if (_transforms[_counter]->_forward_plan) {
      ${executeGuruPlanForVector('_transforms[_counter]->_forward_plan', vector), autoIndent=True}@slurp
    }
    if (_transforms[_counter]->_backward_plan) {
      ${executeGuruPlanForVector('_transforms[_counter]->_backward_plan', vector), autoIndent=True}@slurp
    }
  }
}
  @#
@end def

@def executeGuruPlanForVector($planName, $vector)
@*doc:
Return the execution call for a plan in a variable named `planName` for a vector `vector`.

You might think that I've made a mistake here by calling the r2r function (real-to-real transform)
instead of the dft version, and you'd be wrong (at least in fftw-3.2alpha3). After much trawling through their
code, because the r2r transforms require the same number of arguments as mpi dft transforms (as split real/complex
data isn't supported by the mpi code but is supported by the serial code) you actually need to call the r2r version
not the dft version if you don't want you code to SEGFAULT. And who likes SEGFAULTs? Not me.
*@
  @#
fftw_execute_r2r($planName, reinterpret_cast<double*>(_active_${vector.id}),
                 reinterpret_cast<double*>(_active_${vector.id}));
  @#
@end def

@def executeLocalGuruPlanForVector($planName, $vector)
@*doc:
Return the execution call for a plan in a variable named `planName` for a vector `vector`.

This is local, so we call with _dft not _r2r
*@
  @#
fftw_execute_dft($planName, reinterpret_cast<fftw_complex*>(_active_${vector.id}),
                 reinterpret_cast<fftw_complex*>(_active_${vector.id}));
  @#
@end def
