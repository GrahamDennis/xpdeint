@*
SimulationDriver.tmpl

Created by Graham Dennis on 2008-02-27.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.SimulationDrivers._SimulationDriver

@from xpdeint.Vectors.VectorElement import VectorElement

@def description: Default Simulation Driver

@def functionImplementations
  @#
  @super
  @#
${topLevelSegmentFunctionImplementation}@slurp

  @#
@end def

@def topLevelSegmentFunctionImplementation
  @#
void _segment0()
{
  @#
  @# And now insert the code for the features that apply in the top level sequence
  @set $featureOrdering = ['ErrorCheck', 'Stochastic']
  @set $dict = {'extraIndent': 0}
  ${insertCodeForFeatures('topLevelSequenceBegin', featureOrdering, dict), autoIndent=True}@slurp
  @set $extraIndent = dict['extraIndent']
  ${topLevelSequence.topLevelSequenceInnerContent, autoIndent=True, extraIndent=extraIndent}@slurp
  @#
  ${insertCodeForFeaturesInReverseOrder('topLevelSequenceEnd', featureOrdering, dict), autoIndent=True}@slurp
}
  @#
@end def


@def mainRoutine
  @#
int main(int argc, char **argv)
{
  ${mainRoutineInnerContent, autoIndent=True}@slurp
  
  return 0;
}
  @#
@end def

@def mainRoutineInnerContent
  @#
  @set $preAllocationFeatureOrdering = ['ChunkedOutput']
${insertCodeForFeatures('preAllocation', $preAllocationFeatureOrdering)}@slurp

  @set vectors = set([v for v in $templates if isinstance(v, VectorElement)])
${setVectorAllocSizes(vectors)}@slurp
  @#
  @for field in $fields
${field.allocate}@slurp
  @end for

  @for $mg in $momentGroups
${mg.allocate}@slurp
  @end for

  @*
    And now insert the code for the features that apply in the main function
  *@
  @# Note that 'Bing', and 'Arguments' commute
  @set $featureOrdering = ['Bing', 'Arguments', 'Validation', 'Driver', 'TransformMultiplexer', 'Benchmark', 'Output']
${insertCodeForFeatures('mainBegin', $featureOrdering)}@slurp

@# This needs to be extracted into a function so that it can be indented further if necessary
/* Code that actually does stuff goes here */
_segment0();

${insertCodeForFeaturesInReverseOrder('mainEnd', $featureOrdering)}@slurp
  @#
  @for $field in $fields
${field.free}@slurp
  @end for

  @#
@end def

@def setVectorAllocSizes($vectors)
  @#
  @for vector in vectors
    @for basis in vector.basesNeeded
${vector.allocSize} = MAX(${vector.allocSize}, ${vector.field.sizeInBasis(basis)} * _${vector.id}_ncomponents);
    @end for
  @end for
  @#
@end def

@def mainBegin($dict)
  @#
  @set $initialisedDimRepArrays = set()
  @#
  @for field in $fields
    @#
    @for dim in field.dimensions
      @for dimRep in [dimRep for dimRep in dim.representations if dimRep and not dimRep.arrayName in initialisedDimRepArrays]
${dimRep.initialiseArray}@slurp
        @silent initialisedDimRepArrays.add(dimRep.arrayName)
      @end for
    @end for
  @end for
  @for $mg in $momentGroups
${mg.outputField.initialise}@slurp
  @end for
  @#
@end def
