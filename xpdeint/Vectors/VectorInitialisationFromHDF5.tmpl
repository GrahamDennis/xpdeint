@*
VectorInitialisationFromHDF5.tmpl

Created by Graham Dennis on 2009-01-29.
Copyright (c) 2009 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Vectors._VectorInitialisationFromHDF5

@from xpdeint.Geometry.NonUniformDimensionRepresentation import NonUniformDimensionRepresentation

@def description: Vector initialisation from a HDF5 file

@def initialiseVector
  @#
  @assert $geometryMatchingMode == 'strict', "'Loose' geometry matching mode isn't supported yet by the HDF5 importer. "
  @set $featureOrdering = ['Stochastic']
  @set $featureDict = {'codeBlock': $codeBlocks['initialisation']}
  @set $space = $vector.initialSpace
  @set $field = $vector.field
  @#
$insertCodeForFeatures('vectorInitialisationBegin', $featureOrdering, featureDict)@slurp
  @#
  @set $initialisationCodeBlock = $codeBlocks['initialisation']
// HDF5 initialisation has three stages.
// 1. Initialise the vector to zero.
// 2. Execute any CDATA code if there is any.
// 3. Read data from the HDF5 file.

{
  ${initialisationCodeBlock.loop(self.insideInitialisationLoops), autoIndent=True}@slurp
}

htri_t result;
hid_t hdf5_file = H5Fopen("${filename}", H5F_ACC_RDONLY, H5P_DEFAULT);

  @set $dimCount = len(field.dimensions)
hsize_t file_dims[${dimCount}];

  @for dimNum, dim in enumerate(field.dimensions)
    @set $dimRep = dim.inSpace($vector.initialSpace)
hid_t dataset_${dimRep.name} = H5Dopen(hdf5_file, "${groupName}/${dimRep.name}");
hid_t dataspace_${dimRep.name} = H5Dget_space(dataset_${dimRep.name});
file_dims[$dimNum] = H5Sget_simple_extent_npoints(dataspace_${dimRep.name});
${dimRep.type}* ${dimRep.name}_inputdata = (${dimRep.type}*)xmds_malloc(H5Sget_simple_extent_npoints(dataspace_${dimRep.name}) * sizeof(${dimRep.type}));
    @set $dataType = {'double': 'H5T_NATIVE_DOUBLE', 'long': 'H5T_NATIVE_LONG'}[$dimRep.type]
H5Dread(dataset_${dimRep.name}, $dataType, H5S_ALL, H5S_ALL, H5P_DEFAULT, ${dimRep.name}_inputdata);
    @if not isinstance(dimRep, NonUniformDimensionRepresentation)
      @set $dimArrayName = c'${dimRep.name}_data'
${dimRep.type}* ${dimArrayName} = (${dimRep.type}*)xmds_malloc(${dimRep.globalLattice} * sizeof(${dimRep.type}));
for (long _i0 = 0; _i0 < ${dimRep.globalLattice}; _i0++) {
  ${dimArrayName}[_i0] = ${dimRep.minimum} + ${dimRep.stepSize} * _i0;
}
    @else
      @set $dimArrayName = dimRep.arrayName
    @end if
    @if $geometryMatchingMode == 'strict' or isinstance(dimRep, NonUniformDimensionRepresentation)
for (long _i0 = 0; _i0 < ${dimRep.globalLattice}-1; _i0++) {
  double step = ${dimArrayName}[_i0+1] - ${dimArrayName}[_i0];
  if (fabs(${dimArrayName}[_i0] - ${dimRep.name}_inputdata[_i0]) > 0.01 * step) {
    // _LOG will cause the simulation to exit
    _LOG(_ERROR_LOG_LEVEL, "Geometry matching mode is strict for dimension '${dimRep.name}'.\n"
                           "This means that the coordinates must be the same as for the input grid.\n"
                           "The problem was found at input_${dimRep.name}: %e, simulation_${dimRep.name}: %e, difference: %e\n",
                           ${dimRep.name}_inputdata[_i0], ${dimArrayName}[_i0], ${dimRep.name}_inputdata[_i0] - ${dimArrayName}[_i0]);
  }
}
    @else
      @# Here we implement any checks required for 'loose' geometryMatchingMode
      @assert False
    @end if
  @end for

  @set $processingDict = {'field': field, 'space': space, 'operation': 'read'}
  @set $variables = [{'vector': $vector, 'arrayName': c'_active_${vector.id}', 'components': $vector.components}]
hid_t file_dataspace;
file_dataspace = H5Screate_simple(${len(field.dimensions)}, file_dims, NULL);
  @for variable in variables
    @if $variable.vector.type == 'double'
      @set $variable['separatedComponents'] = list(enumerate($variable.components))
    @else
      @set $components = []
      @set variable['separatedComponents'] = components
      @for offset, componentName in enumerate($variable.components)
        @silent components.extend([(2*offset, componentName + 'R'), (2*offset+1, componentName + 'I')])
      @end for
    @end if
    @for offset, componentName in $variable.separatedComponents
hid_t dataset_${componentName} = 0;
      @set $identifier = c"${groupName}/${componentName}"
if ((result = H5Lexists(hdf5_file, "${identifier}", H5P_DEFAULT))>0)
  dataset_${componentName} = H5Dopen(hdf5_file, "${identifier}");
else if (!result)
  _LOG(_WARNING_LOG_LEVEL, "Warning: Unable to find variable name '${componentName}' in HDF5 file.\n");
else
  _LOG(_WARNING_LOG_LEVEL, "Warning: Unable to determine if variable '${componentName}' exists in HDF5 file. Is the file corrupt?\n");
    @end for
  @end for
  @silent processingDict['variables'] = variables
${processData(processingDict)}@slurp


  @for variable in variables
    @for offset, componentName in $variable.separatedComponents
if (dataset_${componentName}) H5Dclose(dataset_${componentName});
    @end for
  @end for
H5Sclose(file_dataspace);

  @for dim in $vector.field.dimensions
    @set $dimRep = dim.inSpace($vector.initialSpace)
    @if not isinstance(dimRep, NonUniformDimensionRepresentation)
xmds_free(${dimArrayName});
    @end if
xmds_free(${dimRep.name}_inputdata);
H5Sclose(dataspace_${dimRep.name});
H5Dclose(dataset_${dimRep.name});
  @end for
H5Fclose(hdf5_file);

$insertCodeForFeaturesInReverseOrder('vectorInitialisationEnd', $featureOrdering, featureDict)@slurp
  @#
@end def

@def insideInitialisationLoops($codeString)
  @#
// Stage 1 of initialisation
for (unsigned int _component = 0; _component < _${vector.id}_ncomponents; _component++)
  _active_${vector.id}[_${vector.id}_index_pointer + _component] = 0.0;

// Stage 2 of initialisation
  @if $codeString.isspace()
// There is no stage 2.
  @else

// ********** Initialisation code ***************
${codeString}@slurp
// **********************************************
  @end if
  @#
@end def

