@*
ComputedVector.tmpl

Created by Graham Dennis on 2008-03-12.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Vectors._ComputedVector

@*
  Description of template
*@
@def description: computed vector $name

@def evaluateFunctionContents($function)
@*doc:
  This function returns the code for the calculated vector's ``evaluate()`` function.
  
  The ``evaluate()`` function executes the code that defines the calculated vector.
*@
  @#
  @if $integratingComponents
    @# If this vector is constructed through an integral, then we first
    @# need to initialise ourselves to zero.
${initialise}@slurp

  @end if
  @#
${transformVectorsToSpace($dependencies, $evaluationSpace)}@slurp

  @set $setOfVectorsToLoopOver = $dependencies.copy()
  @silent $setOfVectorsToLoopOver.add(self)
  @set $featureOrdering = ['Stochastic']
  @set $featureDict = {'field': $loopingField, 'space': $evaluationSpace}
  @#
  @set $vectorOverrides = []
  @if $integratingComponents
    @silent vectorOverrides.append(self)
  @end if
  @#
${insertCodeForFeatures('computedVectorEvaluationBegin', $featureOrdering, featureDict)}@slurp
${loopOverFieldInSpaceWithVectorsAndInnerContent($loopingField, $evaluationSpace, $setOfVectorsToLoopOver, $insideEvaluationLoops, vectorOverrides=vectorOverrides)}@slurp
${insertCodeForFeaturesInReverseOrder('computedVectorEvaluationEnd', $featureOrdering, featureDict)}@slurp
  @#
  @if $needsFourierTransforms

_${id}_space = $initialSpace;
  @end if
  @#
@end def

@def insideEvaluationLoops
  @#
// ************* Evaluation code ****************
${insertUserCodeFromEntity($evaluationCodeEntity)}@slurp
// **********************************************
  @#
@end def
