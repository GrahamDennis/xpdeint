@*
DeltaAOperator.tmpl

delta-a operator, i.e. dstuff_dt = otherStuff;

Created by Graham Dennis on 2007-10-13.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Operators._DeltaAOperator

@def description: Delta A propagation operator for field $field.name

@def copyDeltaAFunctionContents($function)
  @set $loopingField = $primaryCodeBlock.field
  @set $dimensionsWithIndexOverrides = [dim for dim in loopingField.dimensions if not $deltaAField.hasDimension(dim)]
  @set $setOfVectorsToLoopOver = set($deltaAField.vectors)
  @silent setOfVectorsToLoopOver.update($vectorsForcingReordering)
  @set $indexOverrides = dict([(dim.name, {loopingField: c'_${dim.inSpace($operatorSpace).name}_index'}) for dim in $dimensionsWithIndexOverrides])
${loopOverFieldInSpaceWithVectorsAndInnerContent(loopingField, $operatorSpace, $setOfVectorsToLoopOver, $insideCopyDeltaALoops, $indexOverrides)}@slurp
  @#
@end def

@def insideCopyDeltaALoops
  @#
// This code copies the increments for the components back into the vectors themselves.
  @for $vector in $vectorsForcingReordering
    @for $componentName in $vector.components
      @#
${componentName} = d${componentName}_d${propagationDimension} * _step;
      @#
      @if $deltaAVectorMap[$vector].needsInitialisation
        @# If the delta a vector needs initialisation, then we need to
        @# reset it now that we have copied what we need out of it.
        @#
d${componentName}_d${propagationDimension} = 0.0;
      @end if
    @end for
  @end for
  @#
@end def

@def insideEvaluateOperatorLoops($codeString)
  @#
  @# The Operator class will have defined for us all of the dVariableName_dPropagationDimension variables.
  @# Note that we assume that all of the integration vectors have an operotor component defined for them.
#define d${propagationDimension} _step

// ************* Propagation code ***************
${codeString}@slurp
// **********************************************

#undef d${propagationDimension}


  @# Loop over the components of the integration vectors
  @for $operatorComponentName in $operatorComponents.iterkeys()
    @assert len($operatorComponents[$operatorComponentName]) == 1
    @for $integrationVector, $integrationVectorComponentList in $operatorComponents[$operatorComponentName].iteritems()
      @set $integrationVectorComponentName = $integrationVectorComponentList[0]
      @assert $integrationVectorComponentName in $integrationVector.components
_active_${integrationVector.id}[_${integrationVector.id}_index_pointer + ${integrationVector.components.index($integrationVectorComponentName)}] = @slurp
$operatorComponentName * _step;
    @end for
  @end for
  @#
@end def

