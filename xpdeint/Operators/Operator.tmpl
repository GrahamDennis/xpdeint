@*
Operator.tmpl

Created by Graham Dennis on 2007-10-13.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Operators._Operator

@from xpdeint.Vectors.VectorElement import VectorElement
@from xpdeint.CallOnceGuards import callOncePerInstanceGuard

@def insideEvaluateOperatorLoops
  @#
  @# Content must be provided by a subclass
  @assert 0
  @#
@end def

@@callOncePerInstanceGuard
@def initialise
  @#
  @super
  @#
  @if $operatorVector
_${parent.id}_calculate_${name}_field();
  @end if
  @#
@end def

@def calculateOperatorFieldFunctionContents($function)
  @#
  @for $operatorComponentName in $operatorComponents.iterkeys()
${operatorVector.type} $operatorComponentName;
  @end for
  @#
${codeBlocks['operatorDefinition'].loop(self.insideCalculateOperatorFieldLoops)}@slurp
  @#
@end def

@attr $evaluateOperatorFunctionArgument = 'real _step'

@def evaluateOperatorFunctionContents($function)
  @#
  @if not 'calculateOperatorField' in $functions
${evaluateOperatorFunctionContentsWithCodeBlock(function)}@slurp
  @else
${evaluateOperatorFunctionContentsWithoutCodeBlock(function)}@slurp
  @end if
  @#
@end def

@def evaluateOperatorFunctionContentsWithCodeBlock($function)
  @#
  @if not $operatorVector
    @# If we don't have an operator vector, then we need to create
    @# the component variables so that the user can set them inside
    @# the loop
    @for $operatorComponentName, $operatorComponentDictionary in $operatorComponents.iteritems()
      @set $typeNamesSet = set([vector.type for vector in operatorComponentDictionary.iterkeys()])
      @set $typeName = 'real'
      @if 'complex' in typeNamesSet
        @set $typeName = 'complex'
      @end if
${typeName} ${operatorComponentName};
    @end for

  @end if
  @#
${codeBlocks['operatorDefinition'].loop(self.insideEvaluateOperatorLoops)}@slurp
  @#
  @if $resultVector and $resultVector.needsTransforms

_${resultVector.id}_space = $spaceForBasis($operatorBasis);
  @end if
  @#
@end def

@def evaluateOperatorFunctionContentsWithoutCodeBlock($function)
  @#
  @# We need to loop over all of the vectors to which we are applying our operators.
  @#
${transformVectorsToBasis($targetVectors, $operatorBasis)}@slurp
  @#

  @# We have an operator vector and we will need to loop over it
  @set $setOfVectorsToLoopOver = $targetVectors.copy()
  @silent $setOfVectorsToLoopOver.add($operatorVector)
  @if $resultVector
    @silent $setOfVectorsToLoopOver.add($resultVector)
  @end if
  @#
${evaluateOperatorLoop(setOfVectorsToLoopOver)}@slurp
  @#
  @if $resultVector and $resultVector.needsTransforms

_${resultVector.id}_space = $spaceForBasis($operatorBasis);
  @end if
  @#
@end def
