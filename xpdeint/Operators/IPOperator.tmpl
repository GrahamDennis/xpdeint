@*
IPOperator.tmpl

Interaction-picture transverse derivative operator

Created by Graham Dennis on 2013-10-01.

Copyright (c) 2013, Graham Dennis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*@
@extends xpdeint.Operators._IPOperator

@def applyIPOperator($setOfVectorsToLoopOver)
  @#
if (_exponent > 0) {
  ${doIPLoop($setOfVectorsToLoopOver, $operatorBasis, '*'), autoIndent=True}@slurp
} else {
  ${doIPLoop($setOfVectorsToLoopOver, $operatorBasis, '/'), autoIndent=True}@slurp
}
  @#
@end def

@def doIPLoop($setOfVectorsToLoopOver, $operatorBasis, $operation)
  @#
  @set $loopingField = $parent.field
  @if $field == $loopingField
${loopOverVectorsInBasisWithInnerContent($setOfVectorsToLoopOver, $operatorBasis, $insideEvaluateOperatorLoops($operation))}@slurp
  @else
${loopOverFieldInBasisWithVectorsAndInnerContent($loopingField, $operatorBasis, $setOfVectorsToLoopOver, $insideEvaluateOperatorLoops($operation))}@slurp
  @end if
  @#
@end def

@def insideEvaluateOperatorLoops($operationString)
  @#
${insideEvaluateOperatorLoopsBegin}@slurp
  @#
  @for operatorComponentNumber, (operatorComponentName, operatorComponentVectors) in enumerate($operatorComponents.iteritems())
    @for targetVectorComponents in operatorComponentVectors.itervalues()
      @for targetVectorComponent in targetVectorComponents
// ${operatorComponentName}[$targetVectorComponent]
$targetVectorComponent ${operationString}= _${operatorVector.id}[_${operatorVector.id}_index_pointer + $operatorComponentNumber@slurp
        @if len($integrator.ipPropagationStepFractions) > 1
 + _exponentIndex@slurp
        @end if
];
      @end for
    @end for
  @end for
  @#
@end def
