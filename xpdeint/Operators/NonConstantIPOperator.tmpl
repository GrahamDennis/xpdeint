@*
NonConstantIPOperator.tmpl

Interaction-picture transverse derivative operator

Created by Graham Dennis on 2007-11-21.

Copyright (c) 2007-2012, Graham Dennis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*@
@extends xpdeint.Operators.IPOperator

@from xpdeint.CallOnceGuards import callOncePerInstanceGuard

@attr $calculateOperatorFieldFunctionArguments = [('real', '_step'), ('int', '_exponent'), ('int', '_arrayIndex')]

@def globals
  @#
  @super
  @#
  @if len($integrator.ipPropagationStepFractions) > 1
int _${id}_exponent_offset_map[${len($integrator.ipPropagationStepFractions)}];
  @end if
  @#
@end def

@@callOncePerInstanceGuard
@def initialise
  @#
  @if len($integrator.ipPropagationStepFractions) > 1
memset(_${id}_exponent_offset_map, 0, sizeof(_${id}_exponent_offset_map));
  @end if
  @#
@end def

@def calculateOperatorFieldFunctionContents($function)
  @#
  @if len($integrator.ipPropagationStepFractions) > 1
static const real _propagationStepFractions[] = {
  @for $propagationStepFraction in $integrator.ipPropagationStepFractions
  $propagationStepFraction,
  @end for
};
const real _propagationStepFraction = _propagationStepFractions[abs(_exponent) - 1];
_${id}_exponent_offset_map[abs(_exponent) - 1] = _arrayIndex;
  @else
const real _propagationStepFraction = ${integrator.ipPropagationStepFractions[0]};
  @end if

  @super(function)
  @#
@end def

@def insideCalculateOperatorFieldLoops($codeString)
  @#
${insideCalculateOperatorFieldLoopsBegin}@slurp
  @#
  @# We expect the integrator to have defined '_step'
  @#
// ************** Operator code *****************
${codeString}@slurp
// **********************************************

  @# Loop over each operator component
  @for $operatorComponentNumber, $operatorComponent in enumerate($operatorComponents.iterkeys())
_${operatorVector.id}[_${operatorVector.id}_index_pointer + _arrayIndex * $len($operatorComponents) + ${operatorComponentNumber}]@slurp
 = ${expFunction}(${operatorComponent}${valueSuffix} * _propagationStepFraction * _step);
  @end for
  @#
@end def

@def evaluateOperatorLoop($setOfVectorsToLoopOver)
  @#
  @# We expect the integrator to have defined _exponent
  @#
  @if len($integrator.ipPropagationStepFractions) > 1
unsigned long _exponentIndex = _${id}_exponent_offset_map[abs(_exponent) - 1] * $len($operatorComponents);

  @end if
${applyIPOperator(setOfVectorsToLoopOver)}@slurp
  @#
@end def
