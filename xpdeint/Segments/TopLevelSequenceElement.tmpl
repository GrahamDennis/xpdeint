@*
TopLevelSequenceElement.tmpl

Created by Graham Dennis on 2007-08-27.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Segments.SequenceSegment

@assert $segmentNumber == 0
@attr $globalNameSpaceName = "topLevelSequence"

@*
  Description of template
*@
@def description: segment $segmentNumber (Top level sequence)

@def functionImplementations
  @#
  @# Make this empty as the content of the top-level sequence will be written by
  @# a simulation driver
  @#
@end def

@def topLevelSequenceInnerContent
  @#
$propagationDimension = 0.0;
  @#

  @set $fieldsNotToInitialise = set()
  @for $mg in $momentGroups
    @# Initialise the raw vector
${mg.rawVector.functions['initialise'].call()}
    @# Don't call the initialise method as that will cause
    @# its aliases to be initialised, which is bad.
    @silent fieldsNotToInitialise.add(mg.outputField)
  @end for
  @#
  @set $vectorsToInitialise = set()
  @for field in [f for f in $fields if f not in fieldsNotToInitialise]
    @silent vectorsToInitialise.update(field.managedVectors)
  @end for
  @#
  @for vector in self.evaluationOrderForVectors(vectorsToInitialise)
${vector.initialise}@slurp
  @end for
  @#
  @for $momentGroup in $momentGroups
    @# We only need to set the sample index for the propagation dimension
    @# and only if this moment group has the propagation dimension as one
    @# of its dimensions
    @if not $momentGroup.outputField.hasDimensionName($propagationDimension)
      @continue
    @end if
_${momentGroup.outputField.id}_index_${propagationDimension} = 0;
  @end for
  @#
  @for $momentGroup in $filter(lambda x: x.requiresInitialSample, $momentGroups)
_mg${momentGroup.number}_sample();
  @end for
  @#
${segmentFunctionBody(function=None)}@slurp
  @#

  @for $momentGroup in $momentGroups
_mg${momentGroup.number}_process();
  @end for  
  @#
@end def
