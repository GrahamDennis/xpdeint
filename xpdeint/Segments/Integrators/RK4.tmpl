@*
RK4.tmpl

Created by Graham Dennis on 2007-09-23.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Segments.Integrators.FixedStep

@def description: segment $segmentNumber (RK4 Integrator)
@attr $ipPropagationStepFractions = ['0.5']
@attr $nonconstantIPFields = 1
@attr $extraIntegrationArrayNames = ['akfield', 'aifield']
@attr $isCrossCapable = True

@*
  Single integration step (RK4)
*@
@def singleIntegrationStep($function)
  @#
  @set $arguments = {'_step': '_step', $propagationDimension: $propagationDimension}
${transformVectorsToSpace($integrationVectors, $homeSpace)}@slurp

// a_k = a
${copyVectors($integrationVectors, '_akfield')}@slurp

${functions['nonconstantIPFields'].call(arguments, _exponent = 1, _arrayIndex = 0, parentFunction=function)}

// a = D[a]
${functions['ipEvolve'].call(arguments, _exponent = +1, parentFunction=function)}
${goToHomeSpace}@slurp

// a_i = a
${copyVectors($integrationVectors, '_aifield')}@slurp

  @for $vector in $integrationVectors
_active_${vector.id} = _akfield_${vector.id};
  @end for
  
// a_k = G[a_k, t]
${functions['deltaA'].call(arguments, parentFunction=function)}

// a_k = D[a_k]
${functions['ipEvolve'].call(arguments, _exponent = +1, parentFunction=function)}
${goToHomeSpace}@slurp

${loopOverVectorsWithInnerContentTemplate($integrationVectors, 
"""// a = a + a_k/6
_${vector.id}[$index] += _akfield_${vector.id}[$index]/6.0;
// a_k = a_i + a_k/2
_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + 0.5*_akfield_${vector.id}[$index];
""")}@slurp

${propagationDimension} += 0.5*_step;
  @if $cross

${interpolateDependencies}@slurp
  @end if

// a_k = G[a_k, t + h/2]
${functions['deltaA'].call(arguments, parentFunction=function)}
${goToHomeSpace}@slurp

${loopOverVectorsWithInnerContentTemplate($integrationVectors,
"""// a = a + a_k/3
_${vector.id}[$index] += _akfield_${vector.id}[$index]/3.0;
// a_k = a_i + a_k/2
_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + 0.5*_akfield_${vector.id}[$index];
""")}@slurp

// a_k = G[a_k, t + h/2]
${functions['deltaA'].call(arguments, parentFunction=function)}
${goToHomeSpace}@slurp

${loopOverVectorsWithInnerContentTemplate($integrationVectors,
"""// a = a + a_k/3
_${vector.id}[$index] += _akfield_${vector.id}[$index]/3.0;
// a_k = a_i + a_k
_akfield_${vector.id}[$index] = _aifield_${vector.id}[$index] + _akfield_${vector.id}[$index];
""")}@slurp

// a_k = D[a_k]
${functions['ipEvolve'].call(arguments, _exponent = +1, parentFunction=function)}

${propagationDimension} += 0.5*_step;
  @if $cross

${updateDependenciesForNextStep}@slurp
  @end if

// a_k = G[a_k, t + h]
${functions['deltaA'].call(arguments, parentFunction=function)}
${goToHomeSpace}@slurp

  @for $vector in $integrationVectors
_active_${vector.id} = _${vector.id};
  @end for

// a_k = D[a_k]
${functions['ipEvolve'].call(arguments, _exponent = +1, parentFunction=function)}
${goToHomeSpace}@slurp

${loopOverVectorsWithInnerContentTemplate($integrationVectors, 
"""// a = a + a_k/6
_${vector.id}[$index] += _akfield_${vector.id}[$index]/6.0;
""")}@slurp
  @#
@end def


@def interpolateDependencies
  @#
  @# Insert code to interpolate the dependency vectors onto the half-step point.
  @# 
// Create 4th order midpoint interpolation for dependencies
if (_istep == 0) {
  // We are at the first point
  ${reducedFieldCopy($dependencyMap, 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    1.0/16.0*( 5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
            + 15.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]
            -  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 2 * ${skipSize} * _${vector.id}_ncomponents]
            +      _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 3 * ${skipSize} * _${vector.id}_ncomponents]);
"""), autoIndent=True}@slurp
} else if (_istep == (${stepCount} - 1)) {
  // We are at the last point
  ${reducedFieldCopy($dependencyMap, 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    1.0/16.0*(15.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
            +  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]
            -  5.0*_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - ${skipSize} * _${vector.id}_ncomponents]
            +      _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - 2 * ${skipSize} * _${vector.id}_ncomponents]);
"""), autoIndent=True}@slurp
} else {
  // We are somewhere in the middle
  ${reducedFieldCopy($dependencyMap, 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    9.0/16.0*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
            + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents])
  - 1.0/16.0*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} - ${skipSize} * _${vector.id}_ncomponents]
            + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + 2 * ${skipSize} * _${vector.id}_ncomponents]);
"""), autoIndent=True}@slurp
}
  @#
@end def
