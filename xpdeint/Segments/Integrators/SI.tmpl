@*
SI.tmpl

Created by Joe Hope on 2008-03-24.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Segments.Integrators.FixedStep

@def description: segment $segmentNumber (SI Integrator)
@attr $ipPropagationStepFractions = ['0.5']
@attr $nonconstantIPFields = 1
@attr $extraIntegrationArrayNames = ['oldCopy']
@attr $isCrossCapable = True
@attr $iterations = 3

@*
  Single integration step (SI)
*@
@def singleIntegrationStep($function)
  @#
  @set $arguments = {'_step': '_step', $propagationDimension: $propagationDimension}
${functions['nonconstantIPFields'].call(arguments, _exponent = 1, _arrayIndex = 0, parentFunction=function)}

${functions['ipEvolve'].call(arguments, _exponent = +1, parentFunction=function)}

${propagationDimension} += 0.5*_step;

${transformVectorsToSpace($integrationVectors, $homeSpace)}@slurp

${copyVectors($integrationVectors, '_oldCopy')}@slurp

  @for $vector in $integrationVectors
_active_${vector.id} = _${vector.id};
  @end for

  @if $cross
// Interpolate dependencies to the half-step
${interpolateDependencies}@slurp
  @end if

for (int _iteration = 0; _iteration < ${iterations}; _iteration++) {
  if (_iteration < ${iterations} - 1) {
    ${functions['deltaA'].call(arguments, _step = '0.5*_step', parentFunction=function), autoIndent=True}
  } else {
    ${functions['deltaA'].call(arguments, parentFunction=function), autoIndent=True}
  }
  
  ${transformVectorsToSpace($integrationVectors, $homeSpace), autoIndent=True}@slurp
  
  ${loopOverVectorsWithInnerContentTemplate($integrationVectors,
"""// a = oldCopy + a
_${vector.id}[$index] += _oldCopy_${vector.id}[$index];
"""), autoIndent=True}@slurp
}

${functions['ipEvolve'].call(arguments, _exponent = +1, parentFunction=function)}

${propagationDimension} += 0.5*_step;

  @#
@end def

@def interpolateDependencies
  @#
  @# Insert code to interpolate the dependency vectors onto the half-step point.
  @# 
${reducedFieldCopy($dependencyMap, 
"""
_active_${reducedVector.id}[_${reducedVector.id}_index_pointer + ${componentIndex}] = \\
    0.5*(_active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex}]
       + _active_${vector.id}[_${vector.id}_index_pointer + ${componentIndex} + ${skipSize} * _${vector.id}_ncomponents]);
""")}@slurp
  @#
@end def
