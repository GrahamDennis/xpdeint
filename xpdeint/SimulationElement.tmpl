@*
SimulationElement.tmpl

Created by Graham Dennis on 2007-08-23.
Copyright (c) 2007 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.ScriptElement

@*
  Description of template
*@
@def description: Simulation
@attr $globalNameSpaceName = "simulation"

@def defines
  @#
  @super
  @#
#define _EPSILON 1e-6

#define _SAMPLE_LOG_LEVEL      (1 << 0)
#define _SEGMENT_LOG_LEVEL     (1 << 1)
#define _PATH_LOG_LEVEL        (1 << 2)
#define _SIMULATION_LOG_LEVEL  (1 << 3)
#define _WARNING_LOG_LEVEL     (1 << 4)
#define _ERROR_LOG_LEVEL       (1 << 5)
#define _ALL_LOG_LEVELS        _SAMPLE_LOG_LEVEL|_SEGMENT_LOG_LEVEL|_PATH_LOG_LEVEL|_SIMULATION_LOG_LEVEL|_WARNING_LOG_LEVEL|_ERROR_LOG_LEVEL
#define _LOG_LEVELS_BEING_LOGGED (${features['Driver'].logLevelsBeingLogged})

  @set $featureOrdering = ['Driver']
#define _LOG(logLevel, ...) \
  ({ \
    if (logLevel & _LOG_LEVELS_BEING_LOGGED) { \
  @set $dict = {'extraIndent': 0}
      ${insertCodeForFeatures('logFunctionBegin', $featureOrdering, $dict), autoIndent=True}@slurp
  @set $extraIndent = dict['extraIndent']
      ${logFunctionInnerContent, autoIndent=True, extraIndent=extraIndent}@slurp
      ${insertCodeForFeaturesInReverseOrder('logFunctionEnd', $featureOrdering, $dict), autoIndent=True}@slurp
      if (logLevel & _ERROR_LOG_LEVEL) \
        exit(1); \
    } \
  })

#ifndef INFINITY
#define INFINITY HUGE_VAL
#endif

// Define an isfinite that should work on systems that don't have isfinite
#ifndef isfinite
#define isfinite(x) ((x) - (x) == 0)
#endif

#ifndef MAX
#define MAX(a, b) \
  ({ typeof(a) _a = (a); \
     typeof(b) _b = (b); \
     _a > _b ? _a : _b; })
#endif

  @#
@end def

@def logFunctionInnerContent
  @#
printf(__VA_ARGS__); \
fflush(stdout); \
  @#
@end def

@*
  Globals needed at the start of the simulation
*@
@def globals
  @#
  @super
  @#
double ${propagationDimension};

// This stuff is here because libxmds requires it.
// That is because we need the XML parser in order to be able
// to load XSIL files to initialise fields
bool debugFlag = false;
bool xmlDebugFlag =  false;
  @#
@end def

@def functionPrototypes
  @#
  @super
  @#
inline bool _isBigEndian();
  @#
@end def

@def functionImplementations
  @#
  @super
  @#
inline bool _isBigEndian()
{
  static const int i = 1;
  return *(char*)&i == 0;
}
  @#
@end def