@*
SplitUniformDimensionRepresentation.tmpl

Created by Graham Dennis on 2008-07-31.

Copyright (c) 2008-2012, Graham Dennis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*@
@extends xpdeint.Geometry._SplitUniformDimensionRepresentation

@def defines
  @#
  @super
  @if $silent
    @stop
  @end if
  @#
#define ${stepSize}        (2.0*M_PI/($_range))
#define ${minimum}     (-(${globalLattice}/2) * ${stepSize})
#define ${maximum}     ((${globalLattice} - 1)/2 * ${stepSize})
  @#
@end def

@def openLoopMemoryOrder
  @#
#define ${name} ${arrayName}[${loopIndex} + ${localOffset}]
#define d${name} (${stepSize} * (${volumePrefactor}))

for (long ${loopIndex} = 0; ${loopIndex} < ${localLattice}; ${loopIndex}++) {
  @#
@end def

@def closeLoopMemoryOrder
  @#
}
#undef ${name}
#undef d${name}
  @#
@end def

@def openLoopAscending
  @#
#define ${name} ${arrayName}[${loopIndex} + ${localOffset}]
#define d${name} (${stepSize} * (${volumePrefactor}))

for (long ${alternateLoopIndex} = -(${globalLattice}/2); ${alternateLoopIndex} < (${globalLattice} + 1)/2; ${alternateLoopIndex}++) {
  long ${loopIndex} = ${alternateLoopIndex};
  if (${loopIndex} < 0)
    ${loopIndex} += ${globalLattice};
  @#
@end def

@def closeLoopAscending
  @#
}
#undef ${name}
#undef d${name}
  @#
@end def

@def localIndexFromIndexForDimensionRep($dimRep)
  @# Check that our lattice has more points than the other lattice (provided we
  @# know how many points each lattice actually has - if the lattice is defined
  @# at runtime we'll just have string rather than a number, so we can't judge).
  @assert isinstance($runtimeLattice, basestring) or isinstance(dimRep.runtimeLattice, basestring) or $runtimeLattice >= dimRep.runtimeLattice
  @#
${dimRep.loopIndex} + ${dimRep.localOffset} - ${localOffset} + (signbit(${dimRep.name}) ? (${globalLattice} - ${dimRep.globalLattice}) : 0)@slurp
  @#
@end def

@def strictlyAscendingGlobalIndex
  @#
  @if not $hasLocalOffset
${loopIndex} + (signbit(${name}) ? -(${globalLattice}+1)/2 : ${globalLattice}/2)@slurp
  @else
lround(${name}/${stepSize}) + ${globalLattice}/2@slurp
  @end if
  @#
@end def

@def indexForSinglePointSample
  @#
  @# We want to sample the middle, as that is just the first point in memory, return 0
  @# (Don't worry about multiplication by zero, any smart compiler will optimise that out)
0@slurp
  @#
@end def

@def createCoordinateVariableForSinglePointSample
  @#
${type} ${name} = 0.0;
#define d${name} (${stepSize} * (${volumePrefactor}))
  @#
@end def

@def initialiseArray
  @#
for (long ${loopIndex} = 0; ${loopIndex} < (${globalLattice}+1)/2; ${loopIndex}++)
  ${arrayName}[${loopIndex}] = ${loopIndex}*${stepSize};
for (long ${loopIndex} = (${globalLattice}+1)/2; ${loopIndex} < ${globalLattice}; ${loopIndex}++)
  ${arrayName}[${loopIndex}] = -(${globalLattice} - ${loopIndex}) * ${stepSize};
  @#
@end def

