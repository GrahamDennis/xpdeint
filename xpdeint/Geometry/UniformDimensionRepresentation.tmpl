@*
UniformDimensionRepresentation.tmpl

Created by Graham Dennis on 2008-07-31.
Copyright (c) 2008 __MyCompanyName__. All rights reserved.
*@
@extends xpdeint.Geometry._UniformDimensionRepresentation

@def defines
  @#
  @super
  @if $silent
    @stop
  @end if
  @#
#define ${minimum}     (($type)${_minimum})
#define ${maximum}     (($type)${_maximum})
#define ${stepSize}        (($type)${stepSizeString})
  @#
@end def

@def openLoopAscending
  @#
#define ${name} ${arrayName}[${loopIndex} + ${localOffset}]
#define d${name} (${stepSize} * (${volumePrefactor}))

for (long ${loopIndex} = 0; ${loopIndex} < ${localLattice}; ${loopIndex}++) {
  @#
@end def

@def closeLoopAscending
  @#
}
#undef ${name}
#undef d${name}
  @#
@end def

@def openLoopDescending
  @#
#define ${name} ${arrayName}[${loopIndex} + ${localOffset}]
#define d${name} (${stepSize} * (${volumePrefactor}))

for (long ${loopIndex} = ${localLattice}-1; ${loopIndex} >= 0; ${loopIndex}--) {
  @#
@end def

@def closeLoopDescending
  @#
}
#undef ${name}
#undef d${name}
  @#
@end def

@def localIndexFromIndexForDimensionRep($dimRep)
  @if $dimRep.lattice == $lattice or $dimRep.reductionMethod == $ReductionMethod.fixedStep
${dimRep.loopIndex} + ${dimRep.localOffset} - ${localOffset}@slurp
  @elif $dimRep.reductionMethod == $ReductionMethod.fixedRange
    @# We are using a fixed-range reduction method.
    @#
    @# Check that our lattice is a multiple of the lattice on which we want the
    @# index. In other words, that for every dimensionRep point, there is a corresponding
    @# point in our lattice. We might be more dense though.
    @assert $lattice % dimRep.lattice == 0
    @#
(${dimRep.loopIndex} + ${dimRep.localOffset}) * (${globalLattice}/${dimRep.globalLattice}) - ${localOffset}@slurp
  @else
    @assert False
  @end if
  @#
@end def

@def strictlyAscendingGlobalIndex
  @#
  @if not $hasLocalOffset
    @return $loopIndex
  @else
lround((${name} - ${minimum})/${stepSize})@slurp
  @end if
  @#
@end def

@def indexForSinglePointSample
  @#
  @# Take the middle point, which is in the middle of the array
${globalLattice}/2@slurp
  @#
@end def

@def createCoordinateVariableForSinglePointSample
  @#
${type} ${name} = ${arrayName}[${globalLattice}/2];
  @#
@end def

@def initialiseArray
  @#
for (long ${loopIndex} = 0; ${loopIndex} < ${globalLattice}; ${loopIndex}++)
  ${arrayName}[${loopIndex}] = ${minimum} + ${loopIndex}*${stepSize};
  @#
@end def
