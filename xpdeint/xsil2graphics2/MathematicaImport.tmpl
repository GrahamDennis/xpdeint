@*
MathematicaImport.tmpl

Created by Joe Hope on 2009-1-7.
Copyright (c) 2009 __MyCompanyName__. All rights reserved.
*@

@def description: Creates text to import data from XSIL files into Mathematica.

@def printMathematicaListOrElement(listOrElement)
  @# This is a function to turn an array into a Mathematica list.  Called recursively, and assumes the elements are floats or lists.
  @if isinstance(listOrElement,float):
$listOrElement@slurp
  @else:
{@slurp
    @for element in listOrElement[0:-1]
$printMathematicaListOrElement($element), @slurp
    @end for
$printMathematicaListOrElement($listOrElement[-1])}@slurp
  @end if
@end def

@def loadXSILFile($xsilFile)

 @set declaredVars=[]
 @for objectNum, xsilObject in enumerate(xsilFile.xsilObjects)  
   @if xsilObject.dataFormat == 'Text':
     @set nIndepVar = len(xsilObject.independentVariables)
     @for var in xsilObject.independentVariables
       @set varName = var["name"].replace('_','')
       <% declaredVars.append(varName+str(objectNum+1)) %>
Clear[$varName$(objectNum+1)]
$varName$(objectNum+1) = {@slurp
       @for arrayValue in $var["array"][0:-1]
$arrayValue, @slurp
       @end for
$var["array"][-1]};
     @end for
   
     @for varD in xsilObject.dependentVariables
       @set varName = varD["name"].replace('_','')
       <% declaredVars.append(varName+str(objectNum+1)) %>
Clear[$varName$(objectNum+1)]
$varName$(objectNum+1) = $printMathematicaListOrElement($varD["array"]);      
     @end for 
      
   @elif xsilObject.dataFormat == 'Binary':
   
Binary!   

   @else:
The data format is neither 'Text' nor 'Binary'.  xsil2graphics2 is confused, and I think ther might be someone standing RIGHT BEHIND YOU!
   @end if
   
 @end for

@# I'd rather use my function above, but it doesn't play nice with strings. 
declaredVariables={@slurp
  @for dV in declaredVars[0:-1]
"$dV", @slurp
  @end for
"$declaredVars[-1]"};
@*
#  print "Joe is great"  
#  print inputXSILFile
#  print type(inputXSILFile)
#  print len(inputXSILFile.xsilObjects)
#  print inputXSILFile.xsilObjects[0]
#  print inputXSILFile.xsilObjects[0].name  
#  print len(inputXSILFile.xsilObjects[0].independentVariables)
#  print inputXSILFile.xsilObjects[0].independentVariables[0]["name"]
#  print len(inputXSILFile.xsilObjects[0].dependentVariables)
#  print inputXSILFile.xsilObjects[0].dependentVariables[0]["name"]
#  print inputXSILFile.xsilObjects[0].dependentVariables[0]["array"]
#  print inputXSILFile.xsilObjects[0].uLong
#  print inputXSILFile.xsilObjects[0].precision
#  print inputXSILFile.xsilObjects[0].encoding
#  print inputXSILFile.xsilObjects[0].dataFormat
#  print inputXSILFile.xsilObjects[0].dependentVariables[0]["array"]

*@
@end def

