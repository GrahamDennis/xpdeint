@*
MatlabOctaveImport.tmpl

Created by Joe Hope on 2009-01-07.
Modified by Gregory Bogomiagkov and Liam Madge on 2013-07-18.

Copyright (c) 2009-2013, Joe Hope and Graham Dennis

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*@

@def description: Creates text to import data from XSIL files into Matlab or Octave (where they are identical).

@attr $defaultExtension = 'm'
@attr $stringFormat = '.12e'

@def printMatlabListOrElement(listOrElement, currentDepth)
  @# This is a function to turn an array into a Matlab list.  Called recursively, and assumes the elements are floats or lists.
  @if isinstance(listOrElement,float):
${format(float(listOrElement),$stringFormat)}@slurp
  @else:
cat($currentDepth, ${', '.join([$printMatlabListOrElement(element, currentDepth - 1) for element in listOrElement])})@slurp
  @end if
@end def

@def printMatlabListOrReadBinary(currentDepth,independentVariables, machineFormat, outputPrecision)
  @set var = $independentVariables[$currentDepth]
  @if currentDepth == len(independentVariables) - 1:
fread(fpDat, $var["length"], '$outputPrecision', 0, '$machineFormat')@slurp
  @else:
cat($($len(independentVariables) - $currentDepth), ${', '.join([$printMatlabListOrReadBinary(currentDepth + 1, independentVariables, machineFormat, outputPrecision) for x in range(0, var["length"])])})@slurp
  @end if
@end def

@def loadXSILFile($xsilFile)
  @for objectNum, xsilObject in enumerate(xsilFile.xsilObjects):
    @if xsilObject.data.format == 'ascii':
${handleASCIIXSILObject(objectNum, xsilObject)}@slurp
    @elif xsilObject.data.format == 'binary':
${handleBinaryXSILObject(objectNum, xsilObject)}@slurp
    @elif xsilObject.data.format == 'hdf5'
${handleHDF5XSILObject(objectNum, xsilObject)}@slurp
    @else
      @raise Exception("No support for Matlab/Octave output for XSIL format '%s'." % xsilObject.data.format)
    @end if
  @end for
@end def

@def handleASCIIXSILObject(objectNum, xsilObject)
  @set nIndepVar = len(xsilObject.independentVariables)
  @for var in xsilObject.independentVariables:
    @set varName = var["name"].replace('_','') + str(objectNum + 1)
clear $varName
$varName = [${', '.join([format(float(e),$stringFormat) for e in var["array"]])}];
  @end for
  @for varD in xsilObject.dependentVariables:
    @set varName = varD["name"].replace('_','') + str(objectNum + 1)
clear $varName
    @if nIndepVar == 1:
$varName = [${', '.join([format(float(e), $stringFormat) for e in varD["array"]])}];
    @else if nIndepVar == 2:
$varName = [${';'.join([(','.join([format(float(val), $stringFormat) for val in subArray])) for subArray in varD["array"]])}];
    @else
$varName = $printMatlabListOrElement($varD["array"], $nIndepVar);
    @end if
  @end for
@end def

@def handleBinaryXSILObject(objectNum, xsilObject)
  @set nIndepVar = len(xsilObject.independentVariables)
  @set machineFormat = {'BigEndian': 'b', 'LittleEndian': 'l'}.get(xsilObject.data.encoding, '$ByteOrdering')
  @set uLongFormat = {'uint32': 'uint32', 'uint64': 'uint64'}.get(xsilObject.data.uLong, 'UnsignedInteger32')
  @set outputPrecision = {'single': 'single', 'double': 'double'}.get(xsilObject.data.precision, 'Real64')
fpDat = fopen('$xsilObject.data.filename');
  @for var in xsilObject.independentVariables:
    @set varName = var["name"].replace('_','') + str(objectNum + 1)
$(varName)Len = fread(fpDat, 1, '$uLongFormat', 0, '$machineFormat');
$(varName) = fread(fpDat, $(varName)Len, '$outputPrecision', 0, '$machineFormat');
  @end for
  @for varD in xsilObject.dependentVariables:
    @set varName = varD["name"].replace('_','') + str(objectNum + 1)
$(varName)Len = fread(fpDat, 1, '$uLongFormat', 0, '$machineFormat');
    @if nIndepVar<=1:
$varName = fread(fpDat, $(varName)Len, '$outputPrecision', 0, '$machineFormat');
    @else:
$varName = $(printMatlabListOrReadBinary(0,$xsilObject.independentVariables, $machineFormat, $outputPrecision));
    @end if
  @end for
fclose(fpDat);
@end def

@def handleHDF5XSILObject(objectNum, xsilObject)
  @raise Exception("HDF5 Import must be implemented by a subclass")
@end def
