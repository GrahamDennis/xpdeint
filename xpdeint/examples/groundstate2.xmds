<?xml version="1.0" encoding="UTF-8"?>
<simulation xmds-version="2">
  <name>groundstate2</name>
  <author>Graham Dennis</author>
  <description>
    Calculate the ground state of a Rubidium BEC in a harmonic magnetic trap.
    Modified from groundstate.xmds to show an ugly hack where a functions operator calls a breakpoint segment
  </description>
  
  <features>
    <auto_vectorise />
    <benchmark />
    <bing />
    <fftw plan="exhaustive" />
    <!-- <openmp /> -->
    <globals>
      <![CDATA[
        const real omegaz = 2*M_PI*20;
        const real omegarho = 2*M_PI*200;
        const real hbar = 1.05457148e-34;
        const real M = 1.409539200000000e-25;
        const real g = 9.8;
        const real scatteringLength = 5.57e-9;
        const real transverseLength = 1e-5;
        const real Uint = 4.0*M_PI*hbar*hbar*scatteringLength/M/transverseLength/transverseLength;
        const real Nparticles = 5.0e5;

        /* offset constants */
        const real EnergyOffset = pow(pow(3.0*Nparticles/4*omegarho*Uint,2.0)*M/2.0,1/3.0); // 1D

      ]]>
    </globals>
  </features>
  
  <geometry>
    <propagation_dimension> t </propagation_dimension>
    <transverse_dimensions>
      <dimension name="y" lattice="1024"  domain="(-2.0e-5, 2.0e-5)" />
    </transverse_dimensions>
  </geometry>
  
  <vector name="potential" initial_space="y" type="complex">
    <components>
      V1
    </components>
    <initialisation>
      <![CDATA[
        real Vtrap = 0.5*M*(omegarho*omegarho*y*y);
      
        V1  = -i/hbar*(Vtrap - EnergyOffset);
      
      ]]>
    </initialisation>
  </vector>
  
  <vector name="wavefunction" initial_space="y" type="complex">
    <components>
      phi
    </components>
    <initialisation>
      <![CDATA[
      
        if (abs(y) < 1.0e-5) {
          phi = 1.0; //sqrt(Nparticles/2.0e-5);
          // This will be automatically normalised later
        } else {
          phi = 0.0;
        }
      
        // This was the sensible initial state
        // real E = pow(pow(3.0*Nparticles/4*omegarho*Uint,2.0)*M/2.0,1/3.0);
        // real magnitudeSq = (E - 0.5*M*(omegarho*omegarho*y*y))/Uint;
        // if (magnitudeSq > 0.0)
        //   phi = sqrt(magnitudeSq);
        // else
        //   phi = 0.0;
      
      ]]>
    </initialisation>
  </vector>
  
  <computed_vector name="normalisation" dimensions="" type="real">
    <components>
      Ncalc
    </components>
    <evaluation>
      <dependencies fourier_space="y">wavefunction</dependencies>
      <![CDATA[
        // Calculate the current normalisation of the wave function.
        Ncalc = mod2(phi);
      ]]>
    </evaluation>
  </computed_vector>
  
  <sequence>
    <integrate algorithm="ARK89" interval="1e-4" steps="10000" tolerance="1e-8">
      <samples>4</samples>
      <filters>
        <filter>
          <dependencies>wavefunction normalisation</dependencies>
          <![CDATA[
            // Correct normalisation of the wavefunction
            phi *= sqrt(Nparticles/Ncalc);
          ]]>
        </filter>
      </filters>
      <operators>
        <operator kind="ip" constant="yes">
          <operator_names>T</operator_names>
          <![CDATA[
            T = -0.5*hbar/M*ky*ky;
          ]]>
        </operator>
        <integration_vectors>wavefunction</integration_vectors>
        <dependencies>potential</dependencies>
        <![CDATA[
          dphi_dt = T[phi] - (i*V1 + Uint/hbar*mod2(phi))*phi;
        ]]>
      </operators>
    </integrate>
    <breakpoint>
      <dependencies fourier_space="ky">wavefunction</dependencies>
    </breakpoint>
  </sequence>
  <output format="binary" filename="groundstate2.xsil">
    <group>
      <sampling initial_sample="no">
        <dimension name="y" lattice="1024" />
        <moments>norm_dens</moments>
        <dependencies>wavefunction normalisation</dependencies>
        <operator kind="functions">
          <![CDATA[
          // Call the breakpoint segment so that every time this moment group gets called,
          // we execute the breakpoint. As the breakpoint is auto-naming, this won't cause
          // older files to get clobbered.
            _segment2();
          ]]>
        </operator>
        <![CDATA[
          norm_dens = mod2(phi)/Ncalc;
        ]]>
      </sampling>
    </group>
  </output>
</simulation>