.. _QuickStartTutorial:

Quickstart Tutorial
===================

The purpose of **xpdeint** is to simplify the process of creating simulations that solve systems of initial-value partial and ordinary differential equations. Instead of going through the error-prone process of writing by hand thousands of lines of code, **xpdeint** enables many problems to be described in a simple XML format. From this XML description **xpdeint** writes a C++ simulation that solves the problem using fast algorithms. Anecdotally, the code generated by **xpdeint** is as fast as, or faster than, code hand-written by an expert, but by using **xpdeint** the time taken to produce the simulation is significantly reduced.

In this tutorial, we will create an **xpdeint** script to solve the Lorenz Attractor, an example of a dynamical system that exhibits chaos. The equations describing this problem are

.. math::
    \frac{dx}{dt} &= \sigma (y - x)\\
    \frac{dy}{dt} &= x (\rho - z) - y\\
    \frac{dz}{dt} &= xy - \beta z

where we will solve with the parameters :math:`\sigma=10`, :math:`\rho=28`, :math:`\beta = \frac{8}{3}` and the initial condition :math:`x(0) = y(0) = z(0) = 1`.

Below is a minimal script that solves this problem. Don't worry if it doesn't make sense yet, soon we'll break it down into easily digestible parts.

.. code-block:: xpdeint

    <simulation xmds-version="2">
      <name>lorenz</name>
      
      <!-- While not strictly necessary, the following two tags are handy. -->
      <author>Graham Dennis</author>
      <description>
        The Lorenz Attractor, an example of chaos.
      </description>
      
      <!-- 
      This part defines all of the dimensions used in the problem,
      in this case, only the dimension of 'time' is needed.
      -->
      <geometry>
        <propagation_dimension> t </propagation_dimension>
      </geometry>
      
      <!-- A 'vector' describes the variables that we will be evolving. -->
      <vector name="position" type="real">
        <components>
          x y z
        </components>
        <initialisation>
          <![CDATA[
          x = y = z = 1.0;
          ]]>
        </initialisation>
      </vector>
      
      <sequence>
        <!--
        Here we define what differential equations need to be solved
        and what algorithm we want to use.
        -->
        <integrate algorithm="ARK89" interval="100.0" tolerance="1e-7">
          <samples>100</samples>
          <operators>
            <integration_vectors>position</integration_vectors>
            <![CDATA[
            dx_dt = 10.0*(y-x);
            dy_dt = 28.0*x - y - x*z;
            dz_dt = x*y - 8.0/3.0*z;
            ]]>
          </operators>
        </integrate>
      </sequence>
      
      <!-- This part defines what data will be saved in the output file -->
      <output>
        <group>
          <sampling>
            <moments>xR yR zR</moments>
            <dependencies>position</dependencies>
            <![CDATA[
              xR = x;
              yR = y;
              zR = z;
            ]]>
          </sampling>
        </group>
      </output>
    </simulation>






You can compile and run this script with **xpdeint**. To compile the script, just pass the name of the script as an argument to **xpdeint**.

.. code-block:: none

    $ xpdeint lorenz.xmds
    g++ -o 'lorenz' 'lorenz.cc' -O3 -ffast-math -funroll-all-loops 
    -fomit-frame-pointer -lxmds -I"/Users/graham/Developer/xmds/xpdeint/xpdeint/includes" 

Now we can execute the generated program 'lorenz'.

.. code-block:: none

    $ ./lorenz
    Current timestep: 4.476617e-02
    Sampled field (for moment group #1) at t = 1.000000e-01
    Current timestep: 3.272028e-02
    Sampled field (for moment group #1) at t = 2.000000e-01
    Current timestep: 2.076453e-02
    Sampled field (for moment group #1) at t = 3.000000e-01
    Current timestep: 2.046119e-02
    Sampled field (for moment group #1) at t = 4.000000e-01
            ... many lines omitted ...
    Current timestep: 3.534532e-02
    Sampled field (for moment group #1) at t = 9.800000e+00
    Current timestep: 3.402670e-02
    Sampled field (for moment group #1) at t = 9.900000e+00
    Current timestep: 4.084675e-02
    Sampled field (for moment group #1) at t = 1.000000e+01
    Current timestep: 1.724322e-02
    Segment 1: minimum timestep: 1.324010e-02 maximum timestep: 1.000000e-01
      Attempted 314 steps, 0.96% steps failed.
    Generating output for lorenz


From this point on the plan is to break the above simulation to bits and describe each part separately. In each part the plan was to briefly mention the other kinds of things that can be done in a given part of the code, but not to go into the details. For example, when discussing the geometry element state that this is where you add additional dimensions to the problem but instead of stating how, simply say that this will be discussed in a later example. In the future we can link to the appropriate part of the documentation.

