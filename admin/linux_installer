#!/bin/bash

# This installer (currently) works for Debian and Debian based distros such
# as Ubuntu, as well as Fedora and Red Hat. Other distros may or may not work.

# Look for apt-get or yum to decide whether we should use a deb or rpm
# type of installation. If more distro support is added later, a finer
# grained detection scheme will probably be necessary.

# If this entire script is run as root, all the files created under the user's home
# directory will be owned by root, which can cause permissioning and deletion
# problems. Only the copying of the binaries to locations outside the user's
# directories should be run as sudo, which is taken care of within this script.
 
if [ "$(whoami)" = "root" ]; then
  echo
  echo "It seems you are running this installer as root or with the \"sudo\" "
  echo "command. Unless you're sure you know what you're doing, please exit"
  echo "and re-run this installer as a normal user (i.e. without \"sudo\")."
  echo
  echo "Continue? (Y/N)"

  read reply
  if [ $reply = "N" -o $reply = "n" ]; then
    exit
  fi
fi

echo $reply

echo
echo
echo "*** XMDS2 installer v0.4 ***"
echo
echo "A standard install downloads the XMDS 2.1 version of the code. This"
echo "is the default."
echo
echo "A developer install will download the latest cutting-edge version of"
echo "the XMDS code, which may include bugs. To perform a developer install,"
echo "run the installer with the --develop option."
echo
echo "In both cases an SVN repository will be created locally, and you can update"
echo "to the latest version of the code at any time by running the command"
echo "  make update"
echo "in the XMDS 2.1 directory."
echo
echo

DEB_INSTALL=0
RPM_INSTALL=0
if [ `which apt-get | wc -l` -ne 0 ]; then
  echo; echo "apt-get found; assuming Debian packaging scheme"; echo
  DEB_INSTALL=1
elif [ `which yum | wc -l` -ne 0 ]; then
  echo; echo "yum found; assuming RPM packaging scheme"; echo
  RPM_INSTALL=1
else
  echo
  echo "ERROR!"
  echo "This installer only works on Debian, Debian-based distributions such"
  echo "as Ubuntu and Mint, Fedora and Red Hat. Since neither \"apt-get\" "
  echo "nor \"yum\" is available, installation can't proceed."
  echo
  echo "Aborting install."
  echo
  exit
fi

XMDS2_install_directory=$HOME"/XMDS_2.1"
NUM_CPUS=`cat /proc/cpuinfo | grep processor | wc -l`
DEVELOPER_INSTALL=0
XMDS_CONFIGURE_STRING=""

parse_command_line_arguments() {
  for i in $@; do
    if [ $i = "--help" ] || [ $i = "-h" ]; then
      echo
      echo "This is the XMDS 2.1 installer."
      echo
      echo "Usage: ./install [options]"
      echo
      echo "Options and arguments:"
      echo "--help          : this help text"
      echo "--develop       : perform a developer install, downloading the absolute lastest version of the code"
      echo
      echo "If no options are given, a standard install will be performed."
      echo
      exit
    elif [ $i = "--develop" ]; then
      DEVELOPER_INSTALL=1
    else
      echo "Unknown option:" $i
    fi
  done
}

install_FFTW() {

  # If version 3.3 of FFTW is available in the repos, use the package manager.
  # If it isn't, install it locally from source under the user's home directory.
  # Comment this code out until a distro actually includes fftw 3.3 in their
  # repository so I can test it, and make sure it comes with both single and
  # double precision libraries, and uses all the compile flags like mpi and avx
  #if [ DEB_INSTALL -eq 1 ]; then
  #  if [ `apt-cache policy libfftw3-dev | grep -i Candidate | grep 3.3 | wc -l -gt 0` ]; then
  #    sudo apt-get -y install libfftw3-dev
  #    $FFTW_install_directory=""
  #    return
  #  fi
  #else
  #  # Not sure how to handle rpms yet
  #  # $FFTW_install_directory=""
  #fi   

  # FFTW 3.3 wasn't in the repos, so install manually from source
  current_directory=`pwd`

  FFTW_install_directory=$XMDS2_install_directory"/fftw-3.3"
  
  cd $XMDS2_install_directory
  echo; echo "Downloading FFTW 3.3 from www.fftw.org..."; echo
  wget http://www.fftw.org/fftw-3.3.tar.gz

  # Make sure the fftw 3.3 archive is present
  if [ ! -f fftw-3.3.tar.gz ]; then
    echo
    echo "ERROR: Couldn't obtain fftw-3.3.tar.gz from www.fftw.org."
    echo "Aborting install."
    exit
  fi

  # Unpack the FFTW 3.3 archive and install it in the user's home directory structure.
  # This avoids conflicting with any other version of FFTW that may have been
  # installed system-wide. Later we'll tell XMDS to use this specific version.  
  tar -xzf fftw-3.3.tar.gz
  rm fftw-3.3.tar.gz
  cd $FFTW_install_directory

  echo
  echo "Installing FFTW. This can take several minutes if you only have a single CPU."
  
  NO_COMPILER_SUPPORT_FOR_AVX=0  

  echo "  Configuring FFTW with single precision option..."

  ./configure --disable-fortran --enable-mpi --enable-single --enable-sse2 --enable-avx --prefix=$FFTW_install_directory > installer.log
  if [ $? -ne 0 ]; then
    # Nonzero error code returned, so something went wrong
    echo "    Configuration failed. Retrying without assuming your compiler supports AVX..."
    ./configure --disable-fortran --enable-mpi --enable-single --enable-sse2 --prefix=$FFTW_install_directory > installer.log
    if [ $? -ne 0 ]; then
      # Still no success, so bail out
      echo "Configuration failed due to some unknown reason. Aborting install."
      echo "Check installer.log in "$FFTW_install_directory " for more information."
      echo
      exit
    else
      echo "    Configuration successful!"
      NO_COMPILER_SUPPORT_FOR_AVX=1
    fi
  fi

  rm -f installer.log > /dev/null

  echo "  Compiling FFTW with single precision option..."
  # The single precision install produces lots of warnings, so redirect both stdout and
  # stderror to /dev/null
  make -j $NUM_CPUS > /dev/null 2>&1
  
  echo "  Copying single precision libraries..."
  make install > /dev/null

  # Note: if precision is not specified, FFTW will compile double-precision libs by default
  echo "  Configuring FFTW with double precision option..."
  if [ $NO_COMPILER_SUPPORT_FOR_AVX -eq 1 ]; then
    ./configure --disable-fortran --enable-mpi --enable-sse2 --prefix=$FFTW_install_directory > /dev/null
  else
    ./configure --disable-fortran --enable-mpi --enable-sse2 --enable-avx --prefix=$FFTW_install_directory > /dev/null
  fi

  echo "  Compiling FFTW with double precision option..."
  make -j $NUM_CPUS > /dev/null

  echo "  Copying double precision libraries..."
  make install > /dev/null

  XMDS_CONFIGURE_STRING=$XMDS_CONFIGURE_STRING" --lib-path "$FFTW_install_directory"/lib"
  XMDS_CONFIGURE_STRING=$XMDS_CONFIGURE_STRING" --include-path "$FFTW_install_directory"/include"

  cd $current_directory
  echo
  echo "FFTW installed!"
  echo
}


install_HDF5_from_source() {
  current_directory=`pwd`

  HDF5_install_directory=$XMDS2_install_directory"/hdf5-1.8.8"
  
  cd $XMDS2_install_directory
  echo; echo "Downloading HDF5 1.8.8 from www.hdfgroup.org.."; echo
  wget http://www.hdfgroup.org/ftp/HDF5/prev-releases/hdf5-1.8.8/src/hdf5-1.8.8.tar.gz

  # Make sure the HDF5 1.8.8 archive is present
  if [ ! -f hdf5-1.8.8.tar.gz ]; then
    echo
    echo "ERROR: Couldn't obtain hdf5-1.8.8.tar.gz from www.hdfgroup.org."
    echo "Aborting install."
    exit
  fi

  # Unpack the HDF5 1.8.8 archive and install it in the user's home directory structure.
  # This avoids conflicting with any other version of HDF5 that may have been
  # installed system-wide. Later we'll tell XMDS to use this specific version.  
  tar -xzf hdf5-1.8.8.tar.gz
  rm hdf5-1.8.8.tar.gz
  cd $HDF5_install_directory

  echo
  echo "Installing HDF5. This can take several minutes if you only have a single CPU."
  echo "  Configuring HDF5..."
  ./configure --prefix=$HDF5_install_directory > installer.log
  if [ $? -ne 0 ]; then
    # Nonzero error code returned, so something went wrong
    echo "\nConfiguration failed due to some unknown reason."
    echo "As HDF5 is required for XMDS2, I am aborting the install."
    echo "Check installer.log in "$HDF5_install_directory " for more information."
    echo
    exit
  fi

  rm -f installer.log > /dev/null

  echo "  Compiling HDF5..."
  # The HDF5 compile produces stupid amounts of warnings, so if
  # I echo the error stream to standard out, the user will see pages
  # and pages of scary stuff. Consequently just dump everything to /dev/null
  make -j $NUM_CPUS > /dev/null 2>&1
  
  echo "  Copying libraries..."
  make install > /dev/null

  XMDS_CONFIGURE_STRING=$XMDS_CONFIGURE_STRING" --lib-path "$HDF5_install_directory"/lib"
  XMDS_CONFIGURE_STRING=$XMDS_CONFIGURE_STRING" --include-path "$HDF5_install_directory"/include"

  cd $current_directory
  echo
  echo "HDF5 installed!"
  echo
}


parse_command_line_arguments $@

if [ $DEVELOPER_INSTALL -eq 1 ]; then
  echo "Performing developer install..."
else
  echo "Performing standard install..."
fi
echo
echo
echo "By default XMDS will be installed in " $XMDS2_install_directory
echo "Press [ENTER] to accept this default, or enter a new path:"
read reply

if [ ! -z $reply ]; then
  XMDS2_install_directory=$reply
fi

# check if XMDS directory exists
if [ ! -d $XMDS2_install_directory ]; then
  mkdir $XMDS2_install_directory
fi

echo
echo "Installing required packages..."
echo

if [ $DEB_INSTALL -eq 1 ]; then
  # Begin Debian package install
  sudo apt-get -y install build-essential subversion libopenmpi-dev openmpi-bin python-dev python-setuptools python-cheetah python-numpy python-pyparsing python-lxml python-mpmath libhdf5-serial-dev libgsl0-dev python-sphinx python-h5py wget

  # Find the optimum ATLAS version (i.e. CBLAS implementation) and install it
  # Older versions of Ubuntu offered pre-optimized packages for various architectures,
  # but newer versions don't, as most of the optimizations are now done at build time.
  if [ `cat /proc/cpuinfo | grep sse3 |wc -l` -gt 0 ]; then
    if [ `cat /proc/cpuinfo | grep "Core(TM) i7" | wc -l` -ne 0 ] && [ `apt-cache --names-only search libatlas-corei7sse3-dev | wc -l` -ne 0 ]; then
      sudo apt-get -y install libatlas-corei7sse3-dev
    elif [ `apt-cache --names-only search libatlas-amd64sse3-dev | wc -l` -ne 0 ]; then
      sudo apt-get -y install libatlas-amd64sse3-dev
    else
      sudo apt-get -y install libatlas-base-dev
    fi
  else
    sudo apt-get -y install libatlas-base-dev
  fi 
  # End Debian packages install
elif [ $RPM_INSTALL -eq 1 ]; then
  # Begin RPM packages install
  sudo yum -y install gcc gcc-c++ make automake subversion openmpi-devel python-devel python-setuptools python-cheetah numpy gsl-devel python-sphinx wget libxml2-devel
  if [ `cat /proc/cpuinfo | grep sse3 |wc -l` -gt 0 ]; then
    sudo yum -y install atlas-sse3-devel
  elif [ `cat /proc/cpuinfo | grep sse2 |wc -l` -gt 0 ]; then
    sudo yum -y install atlas-sse2-devel
  else
    sudo yum -y install atlas-devel
  fi

  # The default Red Hat repo doesn't have hdf5-dev, but Fedora does. 
  # Check if this package is available. If it is, install via the 
  # package manager, otherwise download, compile and install the HDF5 source code.

  if [ `yum info hdf5-devel | grep hdf5-devel | wc -l` -gt 0 ]; then
    sudo yum -y install hdf5-devel
  else
    echo
    echo "The HDF5 package isn't available in your standard repositories."
    echo "I will download, compile and install the HDF5 source code."
    install_HDF5_from_source
  fi
  
  # The packages h5py, pyparsing, python-lxml, and python-mpmath are not available
  # in the default Red Hat repository, but are are in the EPEL repository. See if
  # they're available; if so use yum to get them, if not use easy_install

  if [ `yum info pyparsing | grep pyparsing | wc -l` -gt 0 ]; then
    sudo yum -y install pyparsing
  else
    sudo easy_install pyparsing
  fi

  if [ `yum info python-lxml | grep python-lxml | wc -l` -gt 0 ]; then
    sudo yum -y install python-lxml
  else
    sudo easy_install lxml
  fi

  if [ `yum info h5py | grep h5py | wc -l` -gt 0 ]; then
    sudo yum -y install h5py
  else
    if [ -z $HDF5_install_directory ]; then
      sudo easy_install h5py
    else
      sudo /bin/bash -c "export HDF5_DIR=${HDF5_install_directory}; easy_install h5py;"
    fi
  fi

  if [ `yum info python-mpmath | grep python-mpmath | wc -l` -gt 0 ]; then
    sudo yum -y install python-mpmath
  else
    sudo easy_install mpmath
  fi

  # End RPM packages install
fi

# Some distros put MPI libraries and binaries in a location that
# isn't in the default search path, allowing multiple MPI versions
# to coexist. This can also happen with the ATLAS CBLAS libraries.
# Since we need to know where they are in order to compile stuff,
# find where they are located.

ld_search_string=`ld --verbose | grep SEARCH`

# Find the MPI library and see if it's in the linker's search path
# We need to be able to link to the MPI lib to build fftw
MPILIB=`sudo find /usr /lib -name *mpi_cxx.so | head --lines=1`
MPILIBDIR=`dirname $MPILIB`

#if [ `echo $ld_search_string | grep $MPILIBDIR | wc -w` -gt 0 ]; then
#  # MPI library is in standard linker path, so we don't need the $MPILIB variable
#  MPILIBDIR=""
#fi

# Find the MPI header file, and see if it's a standard location
# Actually we don't seem to need this to build fftw, so forget it
# MPIHEADER=`sudo find /usr -name mpi.h | grep -v "src/linux-headers" | head --lines=1`
# MPIHEADERDIR=`dirname $MPIHEADER`

# Find the CBLAS library, and make sure it's not the GSL one
CBLASLIB=`sudo find /usr /lib -name *cblas.so | grep -v -i gsl | head --lines=1`
CBLASLIBDIR=`dirname $CBLASLIB`
if [ `echo $ld_search_string | grep $CBLASLIBDIR | wc -w` -eq 0 ]; then
  # CBLAS library not in standard linker path
  # Need to add it to the XMDS configure string
  XMDS_CONFIGURE_STRING=$XMDS_CONFIGURE_STRING" --include-path "$CBLASHEADERDIR
fi

CBLASHEADER=`sudo find /usr -name cblas.h | grep -v -i gsl | head --lines=1`
CBLASHEADERDIR=`dirname $CBLASHEADER`
if [ ! $CBLASHEADERDIR = "/usr/include" ]; then
  if [ ! $CBLASHEADERDIR = "/usr/local/include" ]; then
    XMDS_CONFIGURE_STRING=$XMDS_CONFIGURE_STRING" --include-path "$CBLASHEADERDIR
  fi
fi

# Some distros don't have mpicc, mpic++ and mpirun in their default executable path, so add a
# symbolic link to it if necessary. 
# Need mpic++ before calling xmds2 --reconfigure
# Need mpicc before calling fftw's ./configure
if [ `which mpicc | wc -l` -eq 0 ]; then
  MPICCPATH=`sudo find /usr /etc -name mpicc | head --lines=1`
  echo; echo "Creating symbolic link to $MPICCPATH"; echo
  sudo ln -s $MPICCPATH /usr/bin/mpicc
fi

if [ `which mpic++ | wc -l` -eq 0 ]; then
  MPICPPPATH=`sudo find /usr /etc -name mpic++ | head --lines=1`
  echo; echo "Creating symbolic link to $MPICPPPATH"; echo
  sudo ln -s $MPICPPPATH /usr/bin/mpic++
fi

if [ `which mpirun | wc -l` -eq 0 ]; then
  MPIRUNPATH=`sudo find /usr /etc /sbin -name mpirun | head --lines=1`
  echo; echo "Creating symbolic link to $MPIRUNPATH"; echo
  sudo ln -s $MPIRUNPATH /usr/bin/mpirun
fi



# Install FFTW3.3 from package manager if available, otherwise build from source
install_FFTW

# Fetch the XMDS2 source files
echo
echo "Contacting sourceforge to checkout XMDS source code. Please wait..."
echo
if [ $DEVELOPER_INSTALL -eq 1 ]; then
  # Fetch the latest XMDS2 source code from sourceforge
  cd $XMDS2_install_directory
  svn checkout https://xmds.svn.sourceforge.net/svnroot/xmds/trunk/xpdeint .
else
  # Fetch a known good version of the XMDS2 source code from sourceforge
  cd $XMDS2_install_directory
  svn checkout -r 2562 https://xmds.svn.sourceforge.net/svnroot/xmds/trunk/xpdeint .
fi

# Compile the Cheetah templates into Python
echo
echo "Compiling Cheetah templates..."
echo
make

# Creates the xmds2 and xsil2graphics2 files in /usr/bin (or wherever), 
# and copy xmds2 python code into the python install path (typically 
# something like /usr/lib/python2.7/site-packages), and tells Python
# about the new package.
echo
echo "Installing XMDS..."
echo
sudo ./setup.py develop

echo
echo "Configuring XMDS with configure string: " $XMDS_CONFIGURE_STRING
echo

# Some distros don't have the MPI libs in their library path so tell XMDS where to find them
# Also tell XMDS where the version of FFTW we just installed is, if it wasn't installed
# via the package manager
# Again, comment this code out until I actually have a distro that has fftw 3.3 in its
# repository so I can test the code works
#if [ $FFTW_install_directory="" ]
#  # FFTW installed via package manager
#  xmds2 --reconfigure --lib-path $MPILIBDIR --include-path $MPIHEADERDIR
#else
#  # FFTW installed from source under the user's directory
#  xmds2 --reconfigure --lib-path $FFTW_install_directory"/lib" --include-path $FFTW_install_directory"/include" --lib-path $MPILIBDIR --include-path $MPIHEADERDIR
#fi

xmds2 --reconfigure $XMDS_CONFIGURE_STRING

# Build the HTML documentation
cd $XMDS2_install_directory"/admin/userdoc-source"
make html

echo
echo "If no errors are displayed above, XMDS 2.1 is installed!"
echo
echo "To see the HTML documentation, point your browser at" $XMDS2_install_directory"/documentation/index.html"
echo "or go to www.xmds.org"
echo
echo "Release notes and instructions can be found in" $XMDS2_install_directory
echo
echo "You can always update to the latest version of XMDS at any time by running \"make update\" "
echo "in the top level XMDS_2.1 directory."


