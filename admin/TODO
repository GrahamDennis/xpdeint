* Add the ability to distribute stochastic simulations using MPI with the scheduling method

* Documentation needs to be written (both user and developer). The developer documentation
  needs to be converted from current straight comments to use docstrings.

* Example library

* In adaptive integrators, the ability to set an absolute cutoff (per vector component) in addition to a relative cutoff
  for step-error calculations.

* Add a 'moment group 0' which contains simulation constants. 
  This moment group would be zero-d and would contain various constants depending on the
  exact simulation. Constants that should be included are: the final value of the propagation dimension,
   any passed-in arguments, the number of paths (if appropriate), and anything else appropriate.
  - This can be added in the HDF5 output file.

* Add support for moment post-processing. This is only necessary for multi-path simulations where a temporal fourier transform needs to be averaged.

* Rewrite bindNamedVectors/preflight system. It's a mess. bindNamedVectors/preflight should probably be renamed to something like 'localPreflight'/'nonlocalPreflight'.


* Make xmds/xpdeint code compile on Windows. Currently it works in Cygwin but suffers from 
  SERIOUS performance degradation. I've been trying to compile a simple script (modified 
  kubo.xmds) using the MS Visual Studio 2005 Express compiler. The following are compile issues:
  - Headers <unistd.h> <sys/time.h> and <stdint.h> don't exist on Windows. Fixed with #ifdef POSIX.
      unistd.h - not sure when we use it... perhaps for pthreads?
      sys/time.h - we'll need to replace gettimeofday() with getsystemtime() or similar. Affects benchmark,
      stdint.h - seems to be C99 but not in Visual studio 2005... strange... used for what exactly?
  - M_PI/etc aren't defined by default in math.h. Defining _USE_CONSTANTS fixes that.
  - _LOG lines reutrn syntax errors. Fixed with Grahams patch
  - erand48 is not defined on Windows. dsfmt replacements work fine.
  - fseeko is a POSIX thing as well and is missing on Windows. To use 64 bit offsets we 
    could substitute with fsetpos and _filelengthi64. 
  - fftw3 has compiled windows DLL's which they claim are well optimised. Linking with them is
    easy but we can't do wisdom. #ifdef POSIX removes wisdom from windows.
  Implementation notes:
  - I don't think a Windows distribution needs MPI/OpenMP support. Otherwise, I don't see why the
    things xmds does isn't easily portable...
  - Now works fine with limited features, fftw without wisdom, and ASCII output. 
  - kubo is MUCH faster compiled on MSVC++ than cygwin GCC
  - diffusion_win works fine on windows.
  - Next priorities: getting fftw3 working and porting the benchmark code...
  - Investigate MinGW GCC 4.3 performance versus Visual Studio performance.

* Breakpoint on signal? (e.g. USR1)

Testcases needed:
* MPI with Fourier transforms testing looping over both MPI dimensions with a vector that only has one of the two MPI dimensions.
* Various tests using nonlocal dimension access
* Tests of dumping fields with integer-valued dimensions using HDF5
* Tests dumping fields where the testcase data was dumped on a big-endian machine (PPC)
* More testcases doing stupid things with loading and dumping of various formats of data, including loading in MPI
  simulations, writing of ascii/binary/HDF5 data and loading of binary/HDF5 data.

* xsil2graphics2 needs finishing.

* Trigger support (Ask Michael Hush)

* Make it possible to output variables in moment groups without having to write stupid code like:
  xR = x;
  yR = y;
  It's redundant.  If 'x' is an output variable, and 'x' is a component of a dependency, then it's obvious!
  
On Mac OS X, it's probably theoretically possible to compile for x86_64 on a pure i386 machine, or compile with AVX support on a machine that doesn't have it.  How do we detect and resolve this situation?

Idea: Can Richardson extrapolation be used to create an adaptive stochastic integrator?